class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        self.parent[self.find(x)] = self.find(y)

class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        emailToIndex = {}
        emailToName = {}

        # Step 1: Build UnionFind and Map
        uf = UnionFind(10001)
        i = 0
        for account in accounts:
            name = account[0]
            for email in account[1:]:
                if email not in emailToIndex:
                    emailToIndex[email] = i
                    emailToName[email] = name
                    i += 1
                uf.union(emailToIndex[account[1]], emailToIndex[email])

        # Step 2: Union emails
        unions = {}
        for email in emailToName:
            parent = uf.find(emailToIndex[email])
            if parent not in unions:
                unions[parent] = []
            unions[parent].append(email)

        # Step 3: Output result
        result = []
        for emails in unions.values():
            result.append([emailToName[emails[0]]] + sorted(emails))
        return result
