from collections import OrderedDict

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = OrderedDict()

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        self.cache.move_to_end(key)  # 将key移动到最后，表示最近使用过
        return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            del self.cache[key]  # 如果key已经存在，删除旧的key-value对
        elif len(self.cache) == self.capacity:
            self.cache.popitem(last=False)  # 如果缓存满了，删除最久未使用的key-value对
        self.cache[key] = value  # 添加新的key-value对
