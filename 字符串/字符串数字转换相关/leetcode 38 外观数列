⭕️递归
class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        prev = self.countAndSay(n-1)
        result = ""
        i = 0
        while i < len(prev):
            count = 1
            while i < len(prev)-1 and prev[i] == prev[i+1]:
                count += 1
                i += 1
            result += str(count) + prev[i]
            i += 1
        return result

⭕️迭代
class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        result = "1"
        for _ in range(n-1):
            count = 1
            digit = result[0]
            next_result = ""
            for i in range(1, len(result)):
                if result[i] == digit:
                    count += 1
                else:
                    next_result += str(count) + digit
                    count = 1
                    digit = result[i]
            next_result += str(count) + digit
            result = next_result
        return result


n=4
solution = Solution()
print(solution.countAndSay(n))

This solution iterates n-1 times to generate the nth string in the count-and-say sequence, starting from the base case countAndSay(1) = "1". For each iteration, it initializes count and digit to the first character of the previous string, and iterates through the remaining characters. If the current character is the same as digit, it increments count. Otherwise, it appends the count and digit to the next result string, resets count to 1, and updates digit to the current character. Finally, it appends the count and digit for the last substring to the next result string, and sets the result to the next result string. At the end of the iterations, it returns the final result string as the answer for countAndSay(n).


