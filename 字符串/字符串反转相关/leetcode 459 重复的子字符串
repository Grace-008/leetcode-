⭕️双指针模拟
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        for length in range(1,n//2+1):
            if n%length==0:
                matched = True
                i = 0
                for j in range(length, n):
                    if s[i] != s[j]:
                        matched = False
                        break
                    i += 1
                if matched:
                    return True
        return False
        
⭕️旋转数组
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        n = len(s)
        for i in range(1, n//2 + 1):
            newS = self.rotate(s, i)
            if s == newS:
                return True
        return False
    
    def rotate(self, s, k):
        n = len(s)
        k = k % n
        chars = list(s)
        self.reverse(chars, 0, n-1)
        self.reverse(chars, 0, k-1)
        self.reverse(chars, k, n-1)
        return ''.join(chars)

    def reverse(self, nums, start, end):
        while start < end:
            nums[start], nums[end] = nums[end], nums[start]
            start += 1
            end -= 1
⭕️优化旋转数组
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        #由重复子字符串组成的字符串，旋转重复子字符串长度后会得到本身
        #去掉尾部，尾部是还没开始旋转，去掉头部，头部是旋转了一圈回到初始状态
        return (s + s).find(s, 1) != len(s)
