class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        smaller = [0] * len(nums)
        self.merge_sort(list(enumerate(nums)),smaller)
        return smaller

    def merge_sort(self,enum,smaller):
        if len(enum)<=1:
            return enum

        mid = len(enum)//2

        left_half = enum[:mid]
        right_half = enum[mid:]

        self.merge_sort(left_half,smaller)
        self.merge_sort(right_half,smaller)

        self.merge(enum,left_half,right_half,smaller)
        

    def merge(self,enum,left_half,right_half,smaller):
        i = j = k = 0
        while i<len(left_half) and j<len(right_half):
            if left_half[i][1]<=right_half[j][1]:
                enum[k] = left_half[i]
                smaller[left_half[i][0]] +=  j
                i+=1
            else:
                enum[k] = right_half[j]
                j+=1
            k+=1
            
        while i<len(left_half):
            enum[k] = left_half[i]
            smaller[left_half[i][0]] +=  j
            i+=1
            k+=1

        while j<len(right_half):
            enum[k] = right_half[j]
            j+=1
            k+=1

        return enum

