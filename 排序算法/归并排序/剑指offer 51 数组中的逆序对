⭕️暴力解法

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        if nums == None or len(nums)<2:
            return 0

        count=0
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if nums[i]>nums[j]:
                    count+=1
        return count

⭕️归并排序

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        if nums is None or len(nums) <= 1:
            return 0
        temp = [0] * len(nums)
        return self.reversePairsHelper(nums, 0, len(nums) - 1, temp)

    def reversePairsHelper(self, nums, lo, hi, temp):
        if lo >= hi:
            return 0
        mid = lo + (hi - lo) // 2
        leftReversePairs = self.reversePairsHelper(nums, lo, mid, temp)
        rightReversePairs = self.reversePairsHelper(nums, mid + 1, hi, temp)
        mergeReversePairs = self.mergeAndCount(nums, lo, mid, hi, temp)
        return leftReversePairs + rightReversePairs + mergeReversePairs

    def mergeAndCount(self, nums, lo, mid, hi, temp):
        for i in range(lo, hi + 1):
            temp[i] = nums[i]
      
        count = 0
        i = lo
        j = mid + 1
        for k in range(lo, hi + 1):
            if i > mid:
                nums[k] = temp[j]
                j += 1
            elif j > hi:
                nums[k] = temp[i]
                i += 1
            elif temp[i] <= temp[j]:
                nums[k] = temp[i]
                i += 1
            else:
                nums[k] = temp[j]
                j += 1
                count += mid - i + 1
        
        return count

