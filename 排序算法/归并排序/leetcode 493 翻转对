#与leetcode 327相似

from typing import List

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        return self.merge_sort(nums)

    def merge_sort(self, nums):
        if len(nums) <= 1:
            return 0

        mid = len(nums) // 2
        left = nums[:mid]
        right = nums[mid:]
        count = 0
        count += self.merge_sort(left)
        count += self.merge_sort(right)

        # Count reverse pairs.
        i = j = 0
        while i < mid:
            while j < len(right) and left[i] > 2 * right[j]:
                j += 1
            count += j - mid
            i += 1

        # Merge subarrays.
        i = j = k = 0
        while i < mid and j < len(right):
            if left[i] < right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1
        while i < mid:
            nums[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            nums[k] = right[j]
            j += 1
            k += 1

        return count

