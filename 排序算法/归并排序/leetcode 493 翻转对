#与leetcode 327相似

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        return self.merge_sort(nums,0,len(nums)-1)

    def merge_sort(self,nums,left,right):
        if right<=left:
            return 0

        mid = left+(right-left)//2
        count = 0
        count += self.merge_sort(nums,left,mid)
        count += self.merge_sort(nums,mid+1,right)
        
        i=left
        j=mid+1
        while i<=mid:
            while j<=right and nums[i]>2*nums[j]:
                j+=1
            count += (j-(mid+1))
            i+=1

        i = left
        j = mid+1
        temp =[]
        while i<=mid and j<=right:
            if nums[i]<nums[j]:
                temp.append(nums[i])
                i+=1
            else:
                temp.append(nums[j])
                j+=1
        
        while i<=mid:
            temp.append(nums[i])
            i+=1

        while j<=right:
            temp.append(nums[j])
            j+=1

        for k in range(left,right+1):
            nums[k] = temp[k-left]

        return count
