#与leetcode 327相似

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        return self.mergeSort(nums, 0, len(nums)-1)

    def mergeSort(self, nums, lo, hi):
        if lo >= hi:
            return 0
        mid = lo + (hi - lo) // 2

        count = self.mergeSort(nums, lo, mid) + self.mergeSort(nums, mid+1, hi)

        i = lo
        j = mid + 1
        while i <= mid:
            while j <= hi and nums[i] > 2 * nums[j]:
                j += 1
            count += (j - (mid + 1))
            i += 1

        left = nums[lo:mid+1]
        right = nums[mid+1:hi+1]

        i = j = 0
        k = lo
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            nums[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            nums[k] = right[j]
            j += 1
            k += 1

        return count
