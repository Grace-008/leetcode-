⭕️暴力解法

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        count=0
        for i in range(len(nums)):
            for j in range(i,len(nums)):
                sum=0
                for k in range(i,j+1):
                    sum+=nums[k]
                if sum<=upper and sum>=lower:
                    count+=1
        return count


⭕️前缀和
class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        prefixSum = [0]*(len(nums)+1)
        prefixSum[0]=0
        for i in range(len(nums)):
            prefixSum[i+1]=prefixSum[i]+nums[i]

        count=0
        for i in range(len(prefixSum)):
            for j in range(i+1,len(prefixSum)):
                sum=prefixSum[j]-prefixSum[i]
                if sum<=upper and sum>=lower:
                    count+=1
        return count
        
 ⭕️归并排序
 ▶️查找【i，j】使prefixSum[j]-prefixSum[i]属于【lower,upper】
 其中i < j
 
from typing import List

from typing import List

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        sums = [0] * (len(nums)+1)
        for i, num in enumerate(nums):
            sums[i+1] = sums[i] + num

        return self.merge_sort(sums, lower, upper)

    def merge_sort(self, nums, lower, upper):
        if len(nums) <= 1:
            return 0
        
        mid = len(nums) // 2
        left = nums[:mid]
        right = nums[mid:]
        count = 0
        count += self.merge_sort(left, lower, upper)
        count += self.merge_sort(right, lower, upper)

        # Count subarrays whose sum is within the given range.
        i = j = 0
        for left_idx in range(len(left)):
            while i < len(right) and right[i] - left[left_idx] < lower:
                i += 1
            while j < len(right) and right[j] - left[left_idx] <= upper:
                j += 1
            count += j - i

        # Sort the merged subarrays.
        sorted_nums = [0] * len(nums)
        i = j = k = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                sorted_nums[k] = left[i]
                i += 1
            else:
                sorted_nums[k] = right[j]
                j += 1
            k += 1
        while i < len(left):
            sorted_nums[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            sorted_nums[k] = right[j]
            j += 1
            k += 1

        # Copy the sorted subarrays back to the original list.
        for i in range(len(nums)):
            nums[i] = sorted_nums[i]

        return count


