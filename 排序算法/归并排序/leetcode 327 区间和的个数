⭕️暴力解法

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        count=0
        for i in range(len(nums)):
            for j in range(i,len(nums)):
                sum=0
                for k in range(i,j+1):
                    sum+=nums[k]
                if sum<=upper and sum>=lower:
                    count+=1
        return count


⭕️前缀和
class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        prefixSum = [0]*(len(nums)+1)
        prefixSum[0]=0
        for i in range(len(nums)):
            prefixSum[i+1]=prefixSum[i]+nums[i]

        count=0
        for i in range(len(prefixSum)):
            for j in range(i+1,len(prefixSum)):
                sum=prefixSum[j]-prefixSum[i]
                if sum<=upper and sum>=lower:
                    count+=1
        return count
        
 ⭕️归并排序
 ▶️查找【i，j】使prefixSum[j]-prefixSum[i]属于【lower,upper】
 其中i < j
 
class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        n = len(nums)
        prefix_sum = [0] * (n + 1)
        for i in range(n):
            prefix_sum[i+1] = prefix_sum[i] + nums[i]
        return self.merge_sort(prefix_sum, 0, n, lower, upper)
    
    def merge_sort(self, prefix_sum, left, right, lower, upper):
        if left >= right:
            return 0
        mid = (left + right) // 2
        count = self.merge_sort(prefix_sum, left, mid, lower, upper) + self.merge_sort(prefix_sum, mid+1, right, lower, upper)
        p = q = mid + 1
        for i in range(left, mid+1):
            while p <= right and prefix_sum[p] - prefix_sum[i] < lower:
                p += 1
            while q <= right and prefix_sum[q] - prefix_sum[i] <= upper:
                q += 1
            count += q - p
        prefix_sum[left:right+1] = sorted(prefix_sum[left:right+1])
        return count

