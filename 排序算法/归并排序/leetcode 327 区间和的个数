⭕️暴力解法

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        count=0
        for i in range(len(nums)):
            for j in range(i,len(nums)):
                sum=0
                for k in range(i,j+1):
                    sum+=nums[k]
                if sum<=upper and sum>=lower:
                    count+=1
        return count


⭕️前缀和
class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        prefixSum = [0]*(len(nums)+1)
        prefixSum[0]=0
        for i in range(len(nums)):
            prefixSum[i+1]=prefixSum[i]+nums[i]

        count=0
        for i in range(len(prefixSum)):
            for j in range(i+1,len(prefixSum)):
                sum=prefixSum[j]-prefixSum[i]
                if sum<=upper and sum>=lower:
                    count+=1
        return count
        
 ⭕️归并排序
 ▶️查找【i，j】使prefixSum[j]-prefixSum[i]属于【lower,upper】
 其中i < j
 
from typing import List

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        sums = [0] * (len(nums) + 1)
        for i, num in enumerate(nums):
            sums[i + 1] = sums[i] + num
        
        return self.merge_sort(sums, lower, upper, 0, len(sums))

    def merge_sort(self, sums: List[int], lower: int, upper: int, lo: int, hi: int) -> int:
        if hi - lo <= 1:
            return 0
        
        mid = (lo + hi) // 2
        count = self.merge_sort(sums, lower, upper, lo, mid) + self.merge_sort(sums, lower, upper, mid, hi)
        i, j = mid, mid
        
        for left in range(lo, mid):
            while i < hi and sums[i] - sums[left] < lower:
                i += 1
            while j < hi and sums[j] - sums[left] <= upper:
                j += 1
            count += j - i
        
        sums[lo:hi] = sorted(sums[lo:hi])
        return count


---------完整版-------

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        sums = [0] * (len(nums) + 1)
        for i, num in enumerate(nums):
            sums[i+1] = sums[i] + num

        return self.merge_sort(sums, lower, upper, 0, len(sums))

    def merge_sort(self, sums, lower, upper, lo, hi):
        if hi - lo <= 1:
            return 0

        mid = (lo + hi) // 2
        count = self.merge_sort(sums, lower, upper, lo, mid) + self.merge_sort(sums, lower, upper, mid, hi)

        left = sums[lo:mid]
        right = sums[mid:hi]
        i = j = k = 0

        while i < len(left):
            while j < len(right) and right[j] - left[i] < lower:
                j += 1

            while k < len(right) and right[k] - left[i] <= upper:
                k += 1

            count += k - j
            i += 1

        i = j = 0
        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                sums[lo + i + j] = left[i]
                i += 1
            else:
                sums[lo + i + j] = right[j]
                j += 1

        while i < len(left):
            sums[lo + i + j] = left[i]
            i += 1

        while j < len(right):
            sums[lo + i + j] = right[j]
            j += 1

        return count
