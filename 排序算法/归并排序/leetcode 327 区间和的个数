⭕️暴力解法

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        count=0
        for i in range(len(nums)):
            for j in range(i,len(nums)):
                sum=0
                for k in range(i,j+1):
                    sum+=nums[k]
                if sum<=upper and sum>=lower:
                    count+=1
        return count


⭕️前缀和
class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        prefixSum = [0]*(len(nums)+1)
        prefixSum[0]=0
        for i in range(len(nums)):
            prefixSum[i+1]=prefixSum[i]+nums[i]

        count=0
        for i in range(len(prefixSum)):
            for j in range(i+1,len(prefixSum)):
                sum=prefixSum[j]-prefixSum[i]
                if sum<=upper and sum>=lower:
                    count+=1
        return count
        
 ⭕️归并排序
 ▶️查找【i，j】使prefixSum[j]-prefixSum[i]属于【lower,upper】
 其中i < j
 
from typing import List


class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        sums = [0] * (len(nums) + 1)
        for i, num in enumerate(nums):
            sums[i + 1] = sums[i] + num

        return self.merge_sort(sums, lower, upper, 0, len(sums) - 1)

    def merge_sort(self, sums, lower, upper, lo, hi):
        if hi <= lo:
                return 0

            mid = lo + (hi - lo) // 2

            count = 0
            count += self.merge_sort(sums, lower, upper, lo, mid)
            count += self.merge_sort(sums, lower, upper, mid + 1, hi)

            # Count range sums that fall within the given bounds
            i = lo
            j = k = mid + 1
            for left in range(lo, mid + 1):
                while k <= hi and sums[k] - sums[left] < lower:
                    k += 1
                while j <= hi and sums[j] - sums[left] <= upper:
                    j += 1
                count += j - k

            # Merge step
            i, j = lo, mid + 1
            temp = []

            while i <= mid and j <= hi:
                if sums[i] < sums[j]:
                    temp.append(sums[i])
                    i += 1
                else:
                    temp.append(sums[j])
                    j += 1

            while i <= mid:
                temp.append(sums[i])
                i += 1

            while j <= hi:
                temp.append(sums[j])
                j += 1

            for k in range(lo, hi + 1):
                sums[k] = temp[k - lo]

            return count           

