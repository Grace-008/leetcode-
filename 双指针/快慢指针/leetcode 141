https://leetcode-cn.com/problems/linked-list-cycle/

'''
题目很容易理解，让我们判断链表中是否有环，我们只需通过我们的快慢指针即可，

我们试想一下，如果链表中有环的话，一个速度快的指针和一个速度慢的指针在环中运动的话，若干圈后快指针肯定可以追上慢指针的。这是一定的。

'''

from typing import List, Optional


# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        #创建双指针
        fast = head
        slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
            #如果有环，两指针就会相遇
            if fast == slow:
                return True  
        return False

# Create nodes
head = ListNode(3)
node2 = ListNode(2)
node3 = ListNode(0)
node4 = ListNode(-4)

# Link nodes
head.next = node2
node2.next = node3
node3.next = node4
node4.next = node2  # cycle starts here

# Test for cycle
sol = Solution()
has_cycle = sol.hasCycle(head)
print(has_cycle)  # Output: True
