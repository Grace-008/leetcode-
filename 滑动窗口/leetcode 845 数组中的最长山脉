class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        
        longest_arr = 0
        i = 1
        while i<len(arr)-1:
            #找到峰顶
            if arr[i-1] < arr[i] > arr[i+1]:
                left,right=i-1,i+1

                while left>0 and arr[left-1]<arr[left]:
                    left-=1

                while right<len(arr)-1 and arr[right+1]<arr[right]:
                    right+=1

                mountain_length = right-left+1
                longest_arr = max(longest_arr,mountain_length)
                i = right

            else:
                i+=1
        return longest_arr
        
        
class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        up,down=[0]*n, [0]*n
        for i in range(1,n):
            if arr[i]>arr[i-1]:
                up[i]=up[i-1]+1
        
        for i in range(n-2,-1,-1):
            if arr[i]>arr[i+1]:
                down[i]=down[i+1]+1

        longest_moutain=0
        for i in range(1,n-1):
            if up[i]>0 and down[i]>0:
                longest_moutain = max(longest_moutain,up[i]+down[i]+1)
        return longest_moutain

