#移动右边界来扩大窗口，使窗口内部含有所有的需要的子串
#移动左边界，来寻找最小的子串
#有个help函数帮助确认是否含有所有的需要的子串
##记录t当中每个字符出现的次数，再去比较s当中每个字符出现的次数，只要s当中每个字符的次数大于等于t当中的次数
#统计字符串t中每个字符出现的次数
        
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if not s or not t:
            return ''

        char_count = {}
        for char in t:
            char_count[char]=char_count.get(char,0)+1

        required = len(char_count)

        left, right = 0, 0
        min_len = float('inf')
        min_window_start = 0

        formed = 0

        window_counts = {}
    
        while right<len(s):
            character = s[right]
            window_counts[character] = window_counts.get(character,0)+1

            if character in char_count and window_counts[character]==char_count[character]:
                formed+=1

            while left<=right and formed == required:
                character = s[left]

                if right-left+1<min_len:
                    min_len = right-left+1
                    min_window_start=left

                window_counts[character]-=1

                if character in char_count and window_counts[character]<char_count[character]:
                    formed-=1

                left+=1

            right+=1
        
        if min_len==float('inf'):
            return ''

        return s[min_window_start:min_window_start+min_len]

