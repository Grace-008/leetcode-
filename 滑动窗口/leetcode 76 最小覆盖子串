#移动右边界来扩大窗口，使窗口内部含有所有的需要的子串
#移动左边界，来寻找最小的子串
#有个help函数帮助确认是否含有所有的需要的子串
##记录t当中每个字符出现的次数，再去比较s当中每个字符出现的次数，只要s当中每个字符的次数大于等于t当中的次数
#统计字符串t中每个字符出现的次数
        
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        def create_char_count_dict(t: str):
            char_count = [0] * 128
            unique_chars = 0
            for c in t:
                if char_count[ord(c)] == 0:
                    unique_chars += 1
                char_count[ord(c)] += 1
            return char_count, unique_chars

        cntT, uniqueCharsInt = create_char_count_dict(t)

        left, right = 0, 0
        windowCntS = [0] * 128
        ans = [-1, 0, 0]
        matchedChars = 0

        while right < len(s):
            rightChar = s[right]
            rightCharIndex = ord(rightChar)
            windowCntS[rightCharIndex] += 1

            if windowCntS[rightCharIndex] == cntT[rightCharIndex]:
                matchedChars += 1

            while left <= right and matchedChars == uniqueCharsInt:
                if ans[0] == -1 or right - left + 1 < ans[0]:
                    ans[0] = right - left + 1
                    ans[1] = left
                    ans[2] = right

                leftChar = s[left]
                leftCharIndex = ord(leftChar)
                windowCntS[leftCharIndex] -= 1

                if windowCntS[leftCharIndex] < cntT[leftCharIndex]:
                    matchedChars -= 1

                left += 1

            right += 1

        return "" if ans[0] == -1 else s[ans[1]:ans[2] + 1]
