⭕️暴力解法

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        ans = float('inf')
        for i in range(len(nums)):
            sum = 0
            for j in range(i,len(nums)):
                sum+=nums[j]
                if sum>=target:
                    ans = min(ans,j-i+1)
        return 0 if ans== float('inf')  else ans
        
 ⭕️滑动窗口
 ▶️当窗口不固定时，先移动窗口右边，知道满足条件为止，然后再不停变动left，缩小窗口
 class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left,right=0,0
        sum=0
        ans=float('inf')
        while right<len(nums):
            sum+=nums[right]
            #此时不一定是最短的，所以要缩短窗口
            while sum>=target: 
                #找到符合要求的，更新ans
                ans=min(ans,right-left+1)             
                sum -= nums[left]
                left+=1               
            right+=1
        return 0 if ans==float('inf') else ans
 
⭕️前缀+二分

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        # 因为要求 O(n log(n)) 的解法，所以考虑到二分。又因为二分需要有序，所以考虑前缀和（前缀和一定是有序）
        n = len(nums)
        preSum = [0] * (n+1)
        preSum[0] = 0
        for i in range(1, n+1):
            preSum[i] = preSum[i-1] + nums[i-1]

        # 找到 presu[j] - presum[i] >= target
        # presu[j] >= target + presum[i]
        # 固定指针 i，在某个有序数组中，找到大于等于某个数的第一个位置
        ans = float('inf')
        for i in range(1, n+1):
            t = target + preSum[i-1]
            j = self.firstGETargetElement(preSum, t)
            if j < 0:
                continue
            if j <= len(preSum):  
                ans = min(ans, j - i + 1)
        return 0 if ans == float('inf') else ans

    def firstGETargetElement(self, nums, target):
        if nums is None or len(nums) == 0:
            return -1
        left,right=0,len(nums)-1
        while left<=right:
            mid=left+(right-left)//2
            if nums[mid]>=target:
                if mid==0 or nums[mid-1]<target:
                    return mid
                else:
                    right=mid-1
            else:
                left=mid+1
        return -1
