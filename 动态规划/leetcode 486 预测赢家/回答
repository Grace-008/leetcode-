⭕️dfs
class Solution:
    def predictTheWinner(self, nums: List[int]) -> bool:    
        n = len(nums)
        memo = [[float('-inf')] * n for _ in range(n)]

        def dfs(nums, i, j, memo):
            if i==j:
                return nums[i]
            if memo[i][j]!=float('-inf'):
                return memo[i][j]
            pickI = nums[i] - dfs(nums, i+1, j,memo)
            pickJ = nums[j] - dfs(nums, i, j-1,memo)
            memo[i][j]= max(pickI, pickJ)
            return memo[i][j]

        return dfs(nums, 0, len(nums)-1, memo)>=0

⭕️dp
class Solution:
    def predictTheWinner(self, nums: List[int]) -> bool:
        n = len(nums)
        dp = [[float('-inf')]*n for _ in range(n)]

        for i in range(n):
            dp[i][i]=nums[i]

        for i in range(n-2,-1,-1):
            for j in range(i+1, n):
                dp[i][j]=max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1])
    

        return dp[0][n-1]>0
