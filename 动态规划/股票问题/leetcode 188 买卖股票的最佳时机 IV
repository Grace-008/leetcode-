⭕️dp
from typing import List

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        if k == 0 or n < 2:
            return 0

        dp = [[[0 for _ in range(2)] for _ in range(k+1)] for _ in range(n)]

        for j in range(1, k + 1):
            dp[0][j][0] = 0
            dp[0][j][1] = -prices[0]

        for i in range(1, n):
            # Setting the value for 0 transactions (special case)
            dp[i][0][0] = 0
            dp[i][0][1] = float('-inf')  # Can't hold a stock without transactions

            for j in range(1, k + 1):
                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
                dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])

        return dp[n-1][k][0]

⭕️状态压缩
from typing import List

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        if k == 0 or n < 2:
            return 0

        dp = [[0 for _ in range(k+1)] for _ in range(n)]

        for j in range(1, k + 1):
            dp[j][0] = 0
            dp[j][1] = -prices[0]

        for i in range(1, n):
            # Setting the value for 0 transactions (special case)
            dp[0][0] = 0
            dp[0][1] = float('-inf')  # Can't hold a stock without transactions

            for j in range(1, k + 1):
                dp[j][0] = max(dp[j][0], dp[j][1] + prices[i])
                dp[j][1] = max(dp[j][1], dp[j-1][0] - prices[i])

        return dp[k][0]

