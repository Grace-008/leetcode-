⭕️dp

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # Initialize the dp list
        dp = [[0, 0] for _ in range(len(prices))]

        # Setting up the base conditions
        dp[0][0] = 0
        dp[0][1] = -prices[0]

        # Filling the dp table
        for i in range(1, len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])

        # The last row first column will have the maximum profit without stocks in hand
        return dp[-1][0]


⭕️贪心
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        res = 0
        for i in range(1, len(prices)):
            if prices[i]>prices[i-1]:
                res+=prices[i]-prices[i-1]

        return res
