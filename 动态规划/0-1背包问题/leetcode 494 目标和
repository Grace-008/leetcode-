class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
    #数组中所有数字的和是sum
    #前面设置为负数的数字的总和是neg
    #前面设置为正数的数字的总和是sum-neg

   既然为target，那么就一定有 left组合 - right组合 = target。
    left + right = sum，而sum是固定的。right = sum - left
    公式来了， left - (sum - left) = target 推导出 left = (target + sum)/2 。 target是固定的，sum是固定的，left就可以求出来。

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        total = sum(nums)

        if (total+target)%2!=0:
            return 0
        elif total<abs(target):
            return 0

        new_target = (total+target)//2
        
        dp = [0]*(new_target+1)
        dp[0]=1

        for i in range(len(nums)):
            for j in range(new_target, nums[i]-1, -1):
                dp[j]+=dp[j-nums[i]]

        return dp[-1]

