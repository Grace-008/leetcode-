⭕️暴力解法
class Solution:
    def countSubstrings(self, s: str) -> int:
        count=0
        for i in range(len(s)):
            for j in range(i, len(s)):
                seg = s[i:j+1]
                if seg==seg[::-1]:
                    count+=1
        return count

⭕️dp
#判断是否是回文，存在重复
class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        res = 0

        for i in range(n-1, -1, -1):
            for j in range(i, n):
                # Check for palindromic condition
                if s[i] == s[j]:
                    # If the substring length is less than or equal to 2 or the inner substring is palindromic
                    if j - i <= 1 or dp[i+1][j-1]:
                        dp[i][j] = True
                        res += 1
        return res

