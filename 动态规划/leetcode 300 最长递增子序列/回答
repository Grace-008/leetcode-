⭕️最长递增子数组的解
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if nums is None or len(nums)==0:
            return 0
        dp = [1] * len(nums)
        maxLen = 1
        for i in range(1, len(nums)):
            if nums[i]>nums[i-1]:
                dp[i]=1+dp[i-1]
                maxLen = max(maxLen,dp[i])
                
        return maxLen
⭕️最长递增子序列的解
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if nums is None or len(nums)==0:
            return 0
        dp = [1] * len(nums)
        maxLen = 1
        for j in range(1, len(nums)):
            for i in range(0, j):
                if nums[j]>nums[i]:
                    dp[j]=max(dp[j], dp[i]+1)
                    maxLen = max(maxLen, dp[j])
        return maxLen
            
