⭕️dfs
class Solution:
    def climbStairs(self, n: int) -> int:
        memo = {}
        def dfs(n):
            if n==1: 
                return 1
            elif n==2:
                return 2
            
            if n in memo:
                return memo[n]

            left = dfs(n-1)
            right = dfs(n-2)

            memo[n] = left+right
            return memo[n]

        return dfs(n)


⭕️dp
class Solution:
    def climbStairs(self, n: int) -> int:
        if n<=0: return 0
        if n==1: return 1
        if n==2: return 2
        dp = [-1]*(n+1)
        dp[1]=1
        dp[2]=2
        for i in range(3,n+1):
            dp[i]=dp[i-1]+dp[i-2]

        return dp[n]

⭕️优化
class Solution:
    def climbStairs(self, n: int) -> int:
        if n==1: return 1
        if n==2: return 2
        
        prev=1
        cur=2
        for i in range(3,n+1):
            temp = cur
            cur=cur+prev
            prev = temp


        return cur
