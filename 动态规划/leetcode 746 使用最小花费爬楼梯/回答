⭕️dfs
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        memo = [-1]*(len(cost)+1)
        def dfs(cost, i):
            if i==0 or i==1:
                return 0
            if memo[i]!=-1: return memo[i]
            left = dfs(cost, i-1)
            right = dfs(cost, i-2)

            memo[i]=min(left + cost[i-1], right+cost[i-2])
            return memo[i]

        return dfs(cost, len(cost))

  ⭕️dp
  class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [-1]*(n+1)
        dp[0]=0
        dp[1]=0
        for i in range(2, n+1):
            dp[i]=min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        return dp[n]

  ⭕️优化
  from typing import List

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        prev = 0
        cur = 0
        for i in range(2, n+1):
            prev, cur = cur, min(cur+cost[i-1], prev+cost[i-2])

        return cur
