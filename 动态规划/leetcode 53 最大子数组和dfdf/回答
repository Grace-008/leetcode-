⭕️暴力解法

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum=float('-inf')
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                sum = 0
                for k in range(i,j+1):
                    sum+=nums[k]
                maxSum = max(maxSum, sum)
        return maxSum

⭕️dp
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [[0 for _ in range(len(nums))] for _ in range(len(nums))]

        #状态初始化
        dp[0][0] = 0
        maxSum = dp[0][0]
        for i in range(len(nums)):
            dp[0][i]=dp[0][i-1] + nums[i]
            maxSum = max(maxSum, dp[0][i])

        for i in range(1, len(nums)):
            for j in range(i, len(nums)):
                dp[i][j] = dp[i-1][j] - nums[i-1]
                maxSum = max(maxSum, dp[i][j])

        return maxSum

⭕️dp 优化
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0 for _ in range(len(nums))]

        
        dp[0] = 0
        maxSum = dp[0]
        for i in range(len(nums)):
            dp[i]=dp[i-1] + nums[i]
            maxSum = max(maxSum, dp[i])

        for i in range(1, len(nums)):
            for j in range(i, len(nums)):
                dp[j] = dp[j] - nums[i-1]
                maxSum = max(maxSum, dp[j])

        return maxSum

⭕️dp另一种解法
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [[0 for _ in range(len(nums))] for _ in range(len(nums))]
        dp[0][0] = 0
        maxSum = dp[0][0]
        for i in range(len(nums)):
            dp[0][i] = dp[0][i-1] + nums[i-1]
            maxSum = max(maxSum, dp[0][i])

        for i in range(1, len(nums)):
            for j in range(i, len(nums)):
                dp[i][j] = dp[0][j]-dp[0][i-1]
                maxSum = max(maxSum, dp[i][j])
        return maxSum

⭕️状态压缩
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0 for _ in range(len(nums))]
        dp[0] = 0
        maxSum = dp[0]
        for i in range(len(nums)):
            dp[i] = dp[i-1] + nums[i-1]
            maxSum = max(maxSum, dp[i])

        for i in range(1, len(nums)):
            for j in range(i, len(nums)):
                dp[j] = dp[j]-dp[i-1]
                maxSum = max(maxSum, dp[j])
        return maxSum

⭕️动态规划3
from typing import List

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return nums[0]
            
        dp = [0] * n
        dp[0] = nums[0]
        maxNum = dp[0]
        
        for i in range(1, n):
            dp[i] = max(dp[i-1] + nums[i], nums[i])
            maxNum = max(maxNum, dp[i])

        return maxNum


⭕️状态压缩
def maxSubArray(nums):
    if not nums:
        return 0

    current_sum = max_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)

    return max_sum


        

