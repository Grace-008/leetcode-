⭕️暴力解法
#可以使用求子集的方法
#也可以抽象成树形结构

class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        def is_palindrome(s):
            i = 0
            j = len(s) - 1
            while i < j:
                if s[i] != s[j]:
                    return False
                i += 1
                j -= 1
            return True
        
        def dfs(s, start, path):
            nonlocal count  # Use nonlocal to modify the 'count' variable from the outer function

            if start != 0:
                if is_palindrome(path):
                    count = max(count, len(path))

            for i in range(start, len(s)):
                dfs(s, i + 1, path + s[i])
        
        count = 0
        res = []
        dfs(s, 0, '')
        return count

⭕️dp
class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        if s is None or len(s)==0:
            return 0
        m = len(s)
        dp = [[0 for _ in range(m)] for _ in range(m)]
        for i in range(m):
            dp[i][i]=1
        
        for i in range(m-2,-1,-1):
            for j in range(i+1, m):
                if s[i]==s[j]:
                    dp[i][j]=2+dp[i+1][j-1]
                else:
                    dp[i][j] = max(dp[i+1][j],dp[i][j-1])
        return dp[0][m-1]
  
