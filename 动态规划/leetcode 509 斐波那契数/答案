⭕️递归

class Solution:
    def fib(self, n: int) -> int:
        if n==0: return 0
        if n==1: return 1
        return self.fib(n-1)+self.fib(n-2)


⭕️回溯 时间复杂度（2^n）

class Solution:
    def fib(self, n: int) -> int:
        return self.dfs(n)

    def dfs(self, n):
        if n == 0: return 0
        if n == 1: return 1
        leftFib = self.dfs(n - 1)
        rightFib = self.dfs(n - 2)
        return leftFib + rightFib

⭕️记忆化搜索 时间复杂度（n）
          
class Solution:
    def __init__(self):
        self.memo = {}

    def fib(self, n: int) -> int:
        return self.dfs(n)

    def dfs(self, n):
        if n == 0: return 0
        if n == 1: return 1
        if n in self.memo: return self.memo[n]

        leftFib = self.dfs(n - 1)
        rightFib = self.dfs(n - 2)
        self.memo[n] = leftFib + rightFib
        return self.memo[n]

⭕️记忆化搜索

class Solution:
    def fib(self, n: int) -> int:
        self.memo = [-1] * (n+1)
        return self.dfs(n)

    def dfs(self, n):
        if n == 0: return 0
        if n == 1: return 1
        if self.memo[n] != -1: return self.memo[n]

        leftFib = self.dfs(n - 1)
        rightFib = self.dfs(n - 2)
        self.memo[n] = leftFib + rightFib
        return self.memo[n]

⭕️dp
class Solution:
    def fib(self, n: int) -> int:
        if n<=1: return n
        #定义数组，arr[i]表示的是数字i的斐波那契数
        arr = [0] * (n+1)
        #初始化数组元素
        arr[0]=0
        arr[1]=1

        #计算数组的元素
        for i in range(2,n+1):
            arr[i]=arr[i-1]+arr[i-2]
        #返回最终结果
        return arr[n]

⭕️dp
class Solution:
    def fib(self, n: int) -> int:
        if n<=1: return n
        #定义状态数组，arr[i]表示的是数字i的斐波那契数
        arr = [0] * (n+1)
        #状态初始化
        arr[0]=0
        arr[1]=1

        #状态转移
        for i in range(2,n+1):
            arr[i]=arr[i-1]+arr[i-2]
        #返回最终需要的状态值
        return arr[n]

⭕️状态空间压缩
class Solution:
    def fib(self, n):
        if n <= 1:
            return n
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
