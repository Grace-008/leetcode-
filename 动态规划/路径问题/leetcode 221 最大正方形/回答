from typing import List

def maximalSquare(matrix: List[List[str]]) -> int:
    if not matrix:
        return 0

    m, n = len(matrix), len(matrix[0])
    # 初始化dp数组
    dp = [[0] * n for _ in range(m)]

    maxLength = 0  # 用于记录最大的边长

    for i in range(m):
        for j in range(n):
            # 只有当当前值为'1'时，我们才需要计算
            if matrix[i][j] == '1':
                # 如果i=0或j=0，那么以此为右下角的最大正方形的边长只能是1
                if i == 0 or j == 0:
                    dp[i][j] = 1
                else:
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1
                # 更新最大边长
                maxLength = max(maxLength, dp[i][j])

    # 返回正方形的面积
    return maxLength * maxLength
