⭕️dfs
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        memo = [[0]*n for _ in range(n)]

        def dfs(i, j, memo):
            if i==len(triangle):
                return 0
            if memo[i][j]!=0:
                return memo[i][j]
            left = dfs(i+1, j, memo)
            right = dfs(i+1, j+1, memo)
            
            memo[i][j]=min(left,right)+triangle[i][j]
            return memo[i][j]

        return dfs(0, 0, memo)

⭕️dp
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = [[float('inf')] * n for _ in range(n)]
        for i in range(n):
            dp[n-1][i]=triangle[n-1][i]

        for i in range(n-2,-1,-1):
            for j in range(i+1):
                dp[i][j] = min(dp[i+1][j], dp[i+1][j+1])+triangle[i][j]

        return dp[0][0]

⭕️dp优化
from typing import List

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = [float('inf')] * n 
        
        # Initialize the dp array with the values from the last row of the triangle
        for i in range(n):
            dp[i] = triangle[n-1][i]

        # Bottom-up calculation: starting from the second last row going upwards
        for i in range(n-2, -1, -1):
            for j in range(i + 1):
                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j]

        return dp[0]
