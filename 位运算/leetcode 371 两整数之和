异或运算的确可以被视为二进制的无进位加法。这是因为在异或运算中，当两个相应位都是0或1时，它们的异或结果为0；
而当相应位上只有一个数是1时，它们的异或结果为1。这正好对应了无进位加法中的情况，即当相应位上的两个数都是0或1时，它们的和是0，否则和是1。

  1011
^ 0101
-------
  1110


可以使用与运算符（&）来表示是否进位。在二进制加法中，当两个位上的数字都是1时，会发生进位。因此，我们可以使用与运算符来检查两个位上是否都是1，从而判断是否有进位。

  1011
+ 0101
-------
  0001 <<1 0010(正好是进位的结果)
 
 也就是说，a+b的问题可以拆分为（a和b的无进位结果）+（a和b的进位结果）
 
 ▶️Python的问题
 由于python的整型二进制没有规定位数，所以有可能会导致一直加下去。比如负整数-2（110）在python中可能被表示位11111110
 因此需要固定整数的二进制位。比如当想将任何整数的二进制位固定在4，可以n&0b1111
        11111110
    &   00001111
    =   00001110
 当想将任何整数的二进制位固定在32，可以n&0xFFFFFFFF (此时0xFFFFFFFF被称为mask)

class Solution:
    def getSum(self, a: int, b: int) -> int:
        MAX = 0x7FFFFFFF
        mask = 0xFFFFFFFF
        while b!=0:
            #计算进位
            carry = ((a&b)<<1)&mask
            #计算无进位
            a=(a^b)&mask
            b=carry
        #如果a>MAX的话，那么将a的补码转成负数
        return a if a<=MAX else ~(a^mask)
 
