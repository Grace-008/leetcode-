⭕️暴力解法
class Solution:
    def totalHammingDistance(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                res += self.hammingDistance(nums[i], nums[j])
        return res

    def hammingDistance(self, x, y):
        diff = x ^ y
        res = 0
        while diff:
            diff = diff & (diff-1)
            res+=1
        return res
       
 ⭕️
 不同位的汉明距离是相互独立的
 
 4         00000000000000000000000000000100
 14        00000000000000000000000000001110
 2         00000000000000000000000000000010    2个1   3-2（1）个0  2（2个1）*（3-2）（几个数-几个1）
 
 考虑数组中每个数二进制的第i位，假设一共有t个1和n-t个0，那么显然在第i位的汉明距离的总和为t*（n-t）
 
 class Solution:
    def totalHammingDistance(self, nums: List[int]) -> int:
        n=len(nums)
        #存储所有位对应位的1的个数
        cnt = [0]*32
        for num in nums:
            i=0
            while num>0:
                #检查每一位是否为1，并累加
                cnt[i] += num & 1
                num>>=1
                i+=1
        res=0
        for k in cnt:
            res+= k * (n-k)
        return res

