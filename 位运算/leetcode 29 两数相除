⭕️

▶️使用减法代替除法
22-3=19
19-3=16
16-3=13
13-3=10
10-3=7
7-3=4
4-3=1

▶️边界优化
#考虑边界条件
#最大值：2^31-1 or -2^31
#越界可能性1
if dividend==-2**31 and divisor == -1:
  return 2**31-1
#越界可能性2:在java中，abs(-2**31)=-2**31，因为2**31会越界，这样while dividend>=divisor将不会运作
#解决方法：将正数变为负数
或者 if ((a>>i) >= b) # a>=(b<<i): 改成 无符号右移

▶️优化代码
每次尝试减去除数的倍数，此时从最小值开始减
a=22,b=3             k=1        22- (3<<0)     k=1<<0=1
     22-(3+3)        k=k+k=2    22-（3<<1）     k=1<<1=2
     22-(6+6) = 10   k=4        22- (3<<2)     k=1<<2=4
     22-(12+12) <0              22- (3<<3)

a=10,b=3             k=1        
     10-(3+3)=4      k=2
     10-(6+6)<0

a=4,b=3              k=1
    4-(3+3)<0

a=1,b=3
a<b

时间复杂度：a-b*2^k<=0 => k=log(a/b) => k=logn*logn

▶️继续优化
每次从最大位数开始尝试，31位，30位
22-（3<<31) <0
22- (3<<30) <0
....
22- (3<<2) >0 k=1<<2=4
10- (3<<1) >0 k=1<<1=2
4-  (3<<0) >0 k=1
1<3
时间复杂度 O（31）=哦

注意事项
1.b<<i 做乘法，有可能会越界，所以改成除法    if ((a>>i) >= b): # a>=(b<<i)
2. 如果a是-2**31，即使是abs(a)，仍然是负数，可以使用无符号右移，将-2**31堪称2**31
            if ((a>>>i) >= b):
3.如果b是-2**31，if ((a>>>i) >= b)该等式永远是true，但是  if ((a>>>i) -b >= 0 为false)

class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        #代表正负数
        sign = -1 if (dividend > 0) ^ (divisor > 0) else 1
        
        #考虑边界条件
        #最大值：2**31-1 or -2**31
        #其实要考虑的就是在java中-2**31的绝对值因为越界，仍然只会显示-2**31
        if dividend == -2**31 and divisor == -1:
            return 2**31-1
        dividend = abs(dividend)
        divisor = abs(divisor)
        res = 0
        for i in range(31, -1, -1):
            if ((dividend >> i) - divisor >= 0):
                dividend -= (divisor << i)
                res += (1 << i)
        return res * sign

