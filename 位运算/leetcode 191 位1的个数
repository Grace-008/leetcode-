⭕️对每一位进行测试，看是否为1
测试第i+1位是否是1:（n&1<<i）!=0

class Solution:
    def hammingWeight(self, n: int) -> int:
        res=0
        for i in range(1,33):
            if n & (1<<i-1) != 0:
                res+=1
        return res
        
⭕️右移n
n:      0010 0000 0010 0000 0100 0011 0000 1011
1:      0000 0000 0000 0000 0000 0000 0000 0001
&       0000 0000 0000 0000 0000 0000 0000 0001 res+=1

n>>1:   0001 0000 0001 0000 0010 0001 1000 0101
1:      0000 0000 0000 0000 0000 0000 0000 0001
&       0000 0000 0000 0000 0000 0000 0000 0001 res+=1   

class Solution:
    def hammingWeight(self, n: int) -> int:
        res=0
        for i in range(32):
            #n&1 如果是1的话，则会等于1，否则等于0
                res+=n&1
                #有符号右移和无符号右移是一样的，因为我们只移动32位
                n>>=1 #每次右移1位
        return res

        
⭕️每次移除掉最后一个1，直到n为0
n = n & (n-1)

class Solution:
    def hammingWeight(self, n: int) -> int:
        res=0
        while n != 0 :
            #移除掉最后一个1
            n = n & (n-1)
            res+=1
        return res
        


