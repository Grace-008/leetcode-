⭕️方法一：迭代解法

    00000000000000000000000000011010
 &  00000000000000000000000000000001
    00000000000000000000000000000000 获得最后一位的数字
 ｜ 00000000000000000000000000000000
    00000000000000000000000000000000 搬运到新的数字中
 

    00000000000000000000000000001101 右移一位
 &  00000000000000000000000000000001
    00000000000000000000000000000001 获得最后一位的数字
 ｜ 00000000000000000000000000000000 左移一位
    00000000000000000000000000000001 搬运到新的数字中
    
 class Solution:
    def reverseBits(self, n: int) -> int:
        res=0
        for i in range(32):
            res<<=1
            res = (n&1) | res
            n>>=1
        return res

⭕️方法二：分治法

▶️自上而下法
0000 0000 0000 0000 0000 0000 0001 1011
0000 0000 0001 1011 0000 0000 0000 0000 每16位进行交换
0001 1011 0000 0000 0000 0000 0000 0000 每8位进行交换
1011 0001 0000 0000 0000 0000 0000 0000 每4位进行交换
1110 0100 0000 0000 0000 0000 0000 0000 每2位进行交换
1101 1000 0000 0000 0000 0000 0000 0000

▶️自下而上法
0100 1000 0010 0001 0100 0100 0001 1011
1000 0100 0001 0010 1000 1000 0010 0111 每2位进行交换
0100 1000 0010 0001 1000 1000 0111 0010 每4位进行交换
0010 0001 0100 1000 0111 0010 1000 1000 每8位进行交换
0111 0010 1000 1000 0010 0001 0100 1000 每16位进行交换

▶️如何交换
1.先拿到每两位的第一位 右移一位
2.再拿到每两位的第二位 左移一位
3.取或

    0100 1000 0010 0001 0100 0100 0001 1011
    0 0  1 0  0 1  0 0  0 0  0 0  0 0  1 1
     1 0  1 0  0 0  0 1  1 0  1 0  0 0  0 1
｜  1000 0100 0001 0010 1000 1000 0010 0111


▶️如何拿到每两位的第二位
1.先右移一位
2.与0101取&
     0100 1000 0010 0001 0100 0100 0001 1011
     0010 0100 0001 0000 1010 0010 0000 1101
&    0101 0101 0101 0101 0101 0101 0101 0101
=    0000 0100 0001 0000 0000 0000 0000 0101



      
     0100 1000 0010 0001 0100 0100 0001 1011
&    0101 0101 0101 0101 0101 0101 0101 0101
=.   0100 0000 0000 0001 0100 0100 0001 0011

class Solution:
    def reverseBits(self, n: int) -> int:
        m1 = 0x55555555  # 0101 0101 ...
        m2 = 0x33333333  # 0011 0011 ...
        m3 = 0x0F0F0F0F  # 0000 1111 0000 1111 ...
        m4 = 0x00FF00FF  # 0000 0000 1111 1111 0000 0000 1111 1111

        n = ((n >> 1) & m1) | ((n & m1) << 1)
        n = ((n >> 2) & m2) | ((n & m2) << 2)
        n = ((n >> 4) & m3) | ((n & m3) << 4)
        n = ((n >> 8) & m4) | ((n & m4) << 8)
        n = (n >> 16) | (n << 16)

        return n & 0xFFFFFFFF



