⭕️DFS 递归
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        # If both nodes are None, they are the same
        if not p and not q:
            return True
        
        # If one node is None and the other is not, they are different
        if not p or not q:
            return False
        
        # If the values of the nodes are not the same, they are different
        if p.val != q.val:
            return False
        
        # Recursively check if the left and right subtrees are the same
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

⭕️BFS 遍历
from collections import deque

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p and not q:
            return True
        
        if not p or not q:
            return False
        
        queue = deque([(p, q)])
        
        while queue:
            node1, node2 = queue.popleft()
            
            if node1.val != node2.val:
                return False
            
            if node1.left and node2.left:
                queue.append((node1.left, node2.left))
            elif node1.left or node2.left:
                return False
            
            if node1.right and node2.right:
                queue.append((node1.right, node2.right))
            elif node1.right or node2.right:
                return False
        
        return True
