⭕️使用队列实现
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        queue = deque([root])
        output = []
        while queue:
            level_size = len(queue)
            level = []
            for _ in range(level_size):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            output.append(level)
        return output

⭕️使用前序遍历实现

from typing import List

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right



def createTree(nums):
    if not nums:
        return None
    nodes = [TreeNode(val=num) if num is not None else None for num in nums]
    n = len(nums)
    for i, node in enumerate(nodes):
        if node is not None:
            left_idx = 2 * i + 1
            right_idx = 2 * i + 2
            if left_idx < n:
                node.left = nodes[left_idx]
            if right_idx < n:
                node.right = nodes[right_idx]
    return nodes[0]
    
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        stack = [(root, 0)]
        levels = [[]]
        current_level = 0
        while stack:
            node, level = stack.pop()
            if level > current_level:
                levels.append([])
                current_level += 1
            levels[current_level].append(node.val)
            if node.right:
                stack.append((node.right, level + 1))
            if node.left:
                stack.append((node.left, level + 1))
        return levels


s = Solution()
root = createTree([3,9,20,None,None,15,7])
print(s.levelOrder(root))

⭕️使用前序遍历迭代实现
class Solution:
    def levelOrder(self, root):
        result = []
        self.traverse(root, 0, result)
        return result

    def traverse(self, node, level, result):
        if not node:
            return

        # If the current level is not in the result list, add an empty list for that level
        if len(result) <= level:
            result.append([])

        # Append the node's value to the list at the current level
        result[level].append(node.val)

        # Recursively traverse the left and right subtrees
        self.traverse(node.left, level + 1, result)
        self.traverse(node.right, level + 1, result)
