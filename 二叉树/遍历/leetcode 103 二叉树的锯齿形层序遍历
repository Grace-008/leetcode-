⭕️BFS
class Solution:
    def zigzagLevelOrder(self,root):
        if not root:
            return []

        result = []
        queue = deque([root])
        level = 0

        while queue:
            level_size = len(queue)
            level_nodes = deque()

            for _ in range(level_size):
                node = queue.popleft()

                if level % 2 == 0:
                    level_nodes.append(node.val)  # Append nodes in left-to-right order
                else:
                    level_nodes.appendleft(node.val)  # Append nodes in right-to-left order

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            result.append(list(level_nodes))
            level += 1

        return result
 ⭕️DFS
 class Solution:
    def zigzagLevelOrder(self,root):
        levels = []
        self.preorder(root, 0, levels)
        return levels
        
    def preorder(self, node: TreeNode, level: int, levels: List[List[int]]) -> None:
        if not node:
            return
        if len(levels) == level:
            levels.append([])
        if level % 2 == 0:
            levels[level].append(node.val)
        else:
            levels[level].insert(0, node.val)
        self.preorder(node.left, level + 1, levels)
        self.preorder(node.right, level + 1, levels)
