前序遍历

根节点 左节点 右节点

根结点 右节点 左节点

后序遍历

左节点 右节点 根节点
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return []
        
        stack, output = [root], []
        
        while stack:
            node = stack.pop()
            output.append(node.val)
            
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
                
        return output[::-1]
        
 ⭕️优化,用链表优化，减少最后反转的过程
▶️时间复杂度O（n）
▶️空间复杂度O（n）
 class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        if not root:
            return res

        stack = [root]

        while stack:
            curr = stack.pop()
            res.insert(0, curr.val)
            if curr.left:
                stack.append(curr.left)
            if curr.right:
                stack.append(curr.right)

        return res

⭕️递归
▶️时间复杂度O（n）
▶️空间复杂度O（n）
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def postorderTraversal(self, root):
        res = []
        self.traverse(root, res)
        return res
        
    def traverse(self, node, res):
        if not node:
            return
        self.traverse(node.left, res)  # First, traverse the left subtree
        self.traverse(node.right, res)  # Then, traverse the right subtree
        res.append(node.val)  # Finally, visit the current node (root)
