⭕️后序遍历
 
 class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        if not root:
            return None
        
        if not root.left and not root.right:
            return root

        left = self.invertTree(root.left)
        right = self.invertTree(root.right)

        root.left = right
        root.right = left

        return root


⭕️BFS 迭代
from collections import deque

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return None
        
        queue = deque([root])
        
        while queue:
            node = queue.popleft()
            
            # Swap the left and right children of the current node
            temp = node.left
            node.left = node.right
            node.right = temp
            
            # Add the left and right children to the queue for processing
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
                
        return root

