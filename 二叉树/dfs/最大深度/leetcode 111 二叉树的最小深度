⭕️BFS
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        #当遇到第一个叶子结点，就是最小深度
        if root is None:
            return 0
                    
        queue = deque([(root, 1)])  
        
        while queue:
            node, level = queue.popleft()
            
            # Check if the current node is a leaf node
            if not node.left and not node.right:
                return level
            
            # Add the left and right children to the queue
            if node.left:
                queue.append((node.left, level + 1))
            if node.right:
                queue.append((node.right, level + 1))

                    
⭕️前序遍历-迭代
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        stack = [(root,1)]
        min_depth = float('inf')
        while stack:
            node,depth = stack.pop()
            if not node.left and not node.right:
                min_depth = min(min_depth,depth)
            if node.right:
                stack.append((node.right,depth+1))
            if node.left:
                stack.append((node.left,depth+1))
        return min_depth

⭕️前序遍历-递归
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        self.minDepth = float('inf')
        self.dfs(root,1)
        return self.minDepth

    def dfs(self, node, depth):
        if not node:
            return 
        if not node.left and not node.right:
            self.minDepth = min(self.minDepth, depth)
        self.dfs(node.left, depth+1)
        self.dfs(node.right,depth+1)



⭕️DFS 后序-递归
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        
        leftDepth = self.minDepth(root.left)
        rightDepth = self.minDepth(root.right)
        if not root.left:
            return rightDepth+1

        if not root.right:
            return leftDepth+1

        res = min(leftDepth,rightDepth)+1
        return res
