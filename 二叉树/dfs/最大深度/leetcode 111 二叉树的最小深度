⭕️BFS递归
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        #当遇到第一个叶子结点，就是最小深度
        if root is None:
            return 0
                    
        queue = deque([(root, 1)])  
        
        while queue:
            node, level = queue.popleft()
            
            # Check if the current node is a leaf node
            if not node.left and not node.right:
                return level
            
            # Add the left and right children to the queue
            if node.left:
                queue.append((node.left, level + 1))
            if node.right:
                queue.append((node.right, level + 1))

⭕️BFS迭代
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        #当遇到第一个叶子结点，就是最小深度
        if root is None:
            return 0
        queue = deque([root])  
        level = 0
        while queue:
            size = len(queue)
            level+=1
            for _ in range(size):
                node = queue.popleft()
                
               # Check if the current node is a leaf node
                if not node.left and not node.right:
                    return level
                
                # Add the left and right children to the queue
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
                    
⭕️DFS迭代
class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        stack = [(root,1)]
        min_depth = float('inf')
        while stack:
            node,depth = stack.pop()
            if not node.left and not node.right:
                min_depth = min(min_depth,depth)
            if node.right:
                stack.append((node.right,depth+1))
            if node.left:
                stack.append((node.left,depth+1))
        return min_depth

⭕️DFS 后序-递归
def minDepth(root):
    # 如果树为空，返回0
    if not root:
        return 0

    # 如果左子树为空，返回右子树的最小深度加1
    if not root.left:
        return minDepth(root.right) + 1

    # 如果右子树为空，返回左子树的最小深度加1
    if not root.right:
        return minDepth(root.left) + 1

    # 左右子树都不为空，返回左右子树最小深度的较小值加1
    return min(minDepth(root.left), minDepth(root.right)) + 1
