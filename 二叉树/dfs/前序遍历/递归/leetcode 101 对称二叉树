⭕️后序遍历 递归
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0

        left = root
        right = root
        leftHeight = 0
        rightHeight = 0

        while left:
            left = left.left
            leftHeight += 1

        while right:
            right = right.right
            rightHeight += 1

        # If the tree is perfect
        if leftHeight == rightHeight:
            return 2**leftHeight - 1

        return 1 + self.countNodes(root.left) + self.countNodes(root.right)

⭕️BFS 迭代
from collections import deque

class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return True
        
        queue = deque([(root.left, root.right)])
        
        while queue:
            node1, node2 = queue.popleft()
            
            if not node1 and not node2:
                continue
            
            if not node1 or not node2 or node1.val != node2.val:
                return False
            
            queue.append((node1.left, node2.right))
            queue.append((node1.right, node2.left))
        
        return True
