⭕️DFS 递归
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True

        if not p or not q:
            return False

        if p.val != q.val:
            return False

        outside = self.isSameTree(p.left, q.left)
        inside = self.isSameTree(p.right, q.right)
        isSame = outside and inside
        return isSame

⭕️BFS 遍历
from collections import deque

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p and not q:
            return True
        
        if not p or not q:
            return False
        
        queue = deque([(p, q)])
        
        while queue:
            node1, node2 = queue.popleft()
            
            if node1.val != node2.val:
                return False
            
            if node1.left and node2.left:
                queue.append((node1.left, node2.left))
            elif node1.left or node2.left:
                return False
            
            if node1.right and node2.right:
                queue.append((node1.right, node2.right))
            elif node1.right or node2.right:
                return False
        
        return True
