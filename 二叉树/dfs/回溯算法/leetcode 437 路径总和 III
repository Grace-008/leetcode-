
⭕️计算每个节点所有路径和
class Solution:
    def pathSum(self, root, targetSum):
        return self.dfs(root, [], targetSum)

    def dfs(self, node, pathSumList, targetSum):
        if not node:
            return 0

        #前序遍历，计算每一个节点的路径和
        cnt = 0
        updatedPathSumList = []

        for num in pathSumList:
            num += node.val
            updatedPathSumList.append(num)
            if num == targetSum:
                cnt += 1

        updatedPathSumList.append(node.val)
        if node.val == targetSum:
            cnt += 1

        #后序遍历
        leftCnt = self.dfs(node.left, updatedPathSumList, targetSum)
        rightCnt = self.dfs(node.right, updatedPathSumList, targetSum)

        return cnt + leftCnt + rightCnt
        
 ⭕️减法
 class Solution:
    def pathSum(self, root, target):
        # Define global return var
        self.numOfPaths = 0
        # 1st layer DFS to go through each node
        self.dfs(root, target)
        # Return result
        return self.numOfPaths
    
    # define: traverse through the tree, at each treenode we will start a testPath
    def dfs(self, node, target):
        # exit condition
        if node is None:
            return 
        self.testPath(node, target) # you can move the line of code to any place between the two lines of traversal
        self.dfs(node.left, target)
        self.dfs(node.right, target)
        
    # define: for a given node, DFS to find any path that sum == target, if find self.numOfPaths += 1
    def testPath(self, node, target):
        if node is None:
            return
        if node.val == target:
            self.numOfPaths += 1
            
        target -= node.val
        self.testPath(node.left, target)
        self.testPath(node.right, target)

⭕️加法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root, target):
        # Define global return var
        self.numOfPaths = 0
        # 1st layer DFS to go through each node
        self.dfs(root, target)
        # Return result
        return self.numOfPaths
    
    # define: traverse through the tree, at each treenode we will start a testPath
    def dfs(self, node, target):
        if node is None:
            return 
        self.testPath(node, 0, target) 
        self.dfs(node.left, target)
        self.dfs(node.right, target)
    
        
    # define: for a given node, DFS to find any path that sum == target, if find self.numOfPaths += 1
    def testPath(self, node, current_sum, target):
        if node is None:
            return
        current_sum += node.val
        if current_sum == target:
            self.numOfPaths += 1
            
        self.testPath(node.left, current_sum, target)
        self.testPath(node.right, current_sum, target)
        
        
⭕️前缀和+dfs
class Solution:
    def pathSum(self, root, target):
        # Define global return var
        self.numOfPaths = 0
        # Preorder traversal to build prefix sum dictionary
        # key: prefix sum, value: how many ways to get to this prefix sum
        self.cache = {0:1}

        # Recursive to find the prefix sum includes the path sum is target
        self.dfs(root, 0, target)

        # Return result
        return self.numOfPaths

    def dfs(self, node, currPathSum, target):
        # Exit condition
        if node is None:
            return  
        
        # Update the prefix sum by adding the current val
        currPathSum += node.val
        
        # Here is the main trick:
        # If prefix sum "currPathSum - target" existed in hashmap,
        # There must be a subarray from some node to this node with sum equals to target:
        self.numOfPaths += self.cache.get(currPathSum - target, 0)
        
        # Update the hashmap with current prefix sum
        self.cache[currPathSum] = self.cache.get(currPathSum, 0) + 1
        
        # Run the recursive function on left and right child
        self.dfs(node.left, currPathSum, target)
        self.dfs(node.right, currPathSum, target)
        
        # When move to a different branch, the prefix sum is no longer available, hence remove from hashmap
        self.cache[currPathSum] -= 1
