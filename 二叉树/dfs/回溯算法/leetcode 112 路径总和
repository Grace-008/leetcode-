路径之和

⭕️解法一，减法
        

We traverse the tree in a depth-first manner, and at each node we subtract the node's value from the target sum.

If we reach a leaf node and the remaining sum equals the leaf's value, we've found a valid path and return True. 

If we finish traversing the tree without finding a valid path, we return False.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def hasPathSum(self, root, targetSum):
        if not root:
            return False

        if not root.left and not root.right:  # if reach to a leaf
            return targetSum == root.val

        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)


⭕️解法二：加法

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def hasPathSum(self, root, targetSum):
        return self.dfs(root, 0, targetSum)

    def dfs(self, node, currentSum, targetSum):
        if not node:
            return False
        currentSum += node.val
        if not node.left and not node.right:  # if reach to a leaf
            return currentSum == targetSum
        return self.dfs(node.left, currentSum, targetSum) or self.dfs(node.right, currentSum, targetSum)


