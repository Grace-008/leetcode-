⭕️前序遍历 递归
#先前序遍历，得到结果，再串联成链表

class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        res = []
        self.dfs(root, res)

        if not res:  # Check if the tree is empty
            return

        for i in range(1, len(res)):
            prev = res[i - 1]
            curr = res[i]
            prev.left = None
            prev.right = curr

        root = res[0]  # Update the root to the flattened tree

    def dfs(self, node, res):
        if node is None:
            return
        res.append(node)
        self.dfs(node.left, res)
        self.dfs(node.right, res)

⭕️前序遍历，迭代
#边遍历变串联
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if root is None:
            return 
        stack = [root]
        prev = None
        while stack:
            curr = stack.pop()
            if prev != None:
                prev.left = None
                prev.right = curr
            prev = curr
            if curr.right:
                stack.append(curr.right)
            if curr.left:
                stack.append(curr.left)

⭕️原地改变
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if root is None:
            return 
        curr = root
        while curr:
            if curr.left:
                left = curr.left
                pre = left
                while pre.right:
                    pre = pre.right

                pre.right = curr.right
                curr.left = None
                curr.right = left
                curr = curr.right
            else:
                curr = curr.right
