# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxPathSum(self, root: Optional[TreeNode]) -> int:
        # Initialize a global maximum variable
        self.max_sum = float('-inf')
        # Call the helper function to start the recursion
        self.max_path_sum_helper(root)

        # Return the maximum path sum
        return self.max_sum

    def max_path_sum_helper(self, node):
        if node is None:
            return 0

        # Get the maximum path sum from the left and right subtrees
        left_sum = max(0, self.max_path_sum_helper(node.left))
        right_sum = max(0, self.max_path_sum_helper(node.right))

        # Calculate the maximum path sum passing through the current node
        current_sum = node.val + left_sum + right_sum

        # Update the global maximum if necessary
        self.max_sum = max(self.max_sum, current_sum)

        # Return the maximum sum starting from the current node
        return node.val + max(left_sum, right_sum)
