from typing import List

class Solution:
    def colorBorder(self, grid: List[List[int]], row: int, col: int, color: int) -> List[List[int]]:
        # directions for DFS
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        m, n = len(grid), len(grid[0])
        visited = [[False]*n for _ in range(m)]
        
        original_color = grid[row][col]
        border_cells = []
        
        def dfs(i, j):
            if not (0 <= i < m) or not (0 <= j < n) or grid[i][j] != original_color or visited[i][j]:
                return 
            
            visited[i][j] = True
            
            # if the cell is on the border or next to a cell of a different color, it is a border cell
            if i == 0 or i == m-1 or j == 0 or j == n-1 or any(grid[i+dx][j+dy] != original_color for dx, dy in directions if 0 <= i+dx < m and 0 <= j+dy < n):
                border_cells.append((i, j))
                
            for dx, dy in directions:
                dfs(i+dx, j+dy)
            
