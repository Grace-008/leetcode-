class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        if not board or not board[0]: return False
        rows,cols = len(board),len(board[0])
        dirs = [[-1,0],[1,0],[0,-1],[0,1]]


        def dfs(i,j,word):
            if len(word)==0:
                return True
            
            if not 0<=i<rows or not 0<=j<cols or word[0]!=board[i][j]:
                return False

            temp = board[i][j]
            board[i][j]='#'
            res = dfs(i+1,j,word[1:]) or dfs(i-1,j,word[1:]) or dfs(i,j-1,word[1:]) or dfs(i,j+1, word[1:])
            board[i][j]=temp
            return res

        for i in range(rows):
            for j in range(cols):
                if dfs(i,j,word):
                    return True
        return False
