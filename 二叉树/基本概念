⭕️树结构是一种非线性数据结构，由若干个节点组成。其中一个节点被指定为根节点，其他节点可以被分为若干个不相交的子树，子树也是树结构。以下是树结构的基本概念：

节点（Node）：树中的一个元素，它可以有一个父节点和若干个子节点。
父节点（Parent Node）：节点的直接上级。
子节点（Child Node）：节点的直接下级。
根节点（Root Node）：没有父节点的节点，树的起点。
叶节点（Leaf Node）：没有子节点的节点，也称为终端节点。
层（Level）：从根节点开始，到某一节点所经过的边的数量，该节点的层次即为其层次数加一。
子树（Subtree）：一个节点和它的所有子孙节点所组成的树。
路径（Path）：由一些节点和它们之间所连的边所组成的序列，该序列中的任意两个相邻节点之间都有一条边连接。
深度（Depth）：树中所有节点的最大层次数。
高度（Height）：树中从根节点到叶节点的最大层数。

⭕️二叉树是一种特殊的树结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉树是一种递归定义的数据结构，它要么为空，要么由一个根节点和两个二叉子树组成，分别称为左子树和右子树。

二叉树的特点是，每个节点最多只有两个子节点，而且左子节点和右子节点的顺序是固定的。二叉树的遍历方式包括前序遍历、中序遍历和后序遍历，这些遍历方式都是基于递归的算法实现的。

在计算机科学中，二叉树的应用非常广泛，例如在排序算法中，可以使用二叉树来实现快速排序、归并排序等算法。此外，二叉树还被广泛用于搜索、数据库、编译器等领域。

⭕️满二叉树是一种特殊的二叉树，它的所有非叶节点都有两个子节点，并且所有叶节点都在同一层上。换句话说，满二叉树是一棵深度为h的二叉树，它的所有节点数为2^(h+1) - 1。

满二叉树具有以下特点：

每个节点要么是叶子节点，要么有两个子节点。
所有叶子节点都在同一层上，且在最底层。
它的高度和节点数是固定的，可以通过公式计算得出。
满二叉树的结构非常规整，因此它在算法设计中有很多应用，例如在堆排序、哈夫曼编码等算法中，都可以使用满二叉树来实现。另外，满二叉树还被广泛用于数据结构中的平衡树、搜索树等算法中。

⭕️完全二叉树是一种特殊的二叉树，它的所有叶子节点都在同一层上，除了最后一层，其他层都被完全填满，而最后一层上的节点都尽可能地靠左排列。简单来说，完全二叉树是一个深度为h的二叉树，其中除了第h层之外，其他各层的节点数都达到最大值，第h层有若干节点，按照从左到右的顺序依次排列。

完全二叉树具有以下特点：

对于深度为h的完全二叉树，它的节点数在2^h到2^(h+1)-1之间。
对于任意一个节点i，如果它的左子节点存在，那么它的右子节点一定存在；如果它的左子节点不存在，那么它一定是叶子节点。
完全二叉树具有很好的性质，它的结构非常规整，因此在算法设计中有很多应用。例如，在堆排序、哈夫曼编码等算法中，都可以使用完全二叉树来实现。此外，在树的存储和遍历算法中，完全二叉树也是一个非常重要的数据结构。

