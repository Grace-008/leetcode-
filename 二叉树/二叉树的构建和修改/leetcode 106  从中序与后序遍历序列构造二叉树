在解决这个问题之前，我们需要理解中序遍历和后序遍历的特性：

中序遍历的顺序是：左子树 -> 根节点 -> 右子树
后序遍历的顺序是：左子树 -> 右子树 -> 根节点
我们可以利用这些性质来解决这个问题：

后序遍历的最后一个元素是根节点
在中序遍历序列中，根节点将序列分为两部分，左侧是左子树的节点，右侧是右子树的节点
我们可以在 Python 中实现这个逻辑，如下所示：

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        if not inorder or not postorder:
            return None
            
        # The last node in postorder is the root node
        root_val = postorder[-1]
        root = TreeNode(root_val)

        # The index of the root node in inorder
        mid_idx = inorder.index(root_val)

        # Recursively construct the left and right subtree
        root.left = self.buildTree(inorder[:mid_idx], postorder[:mid_idx])
        root.right = self.buildTree(inorder[mid_idx+1:], postorder[mid_idx:-1])

        return root
