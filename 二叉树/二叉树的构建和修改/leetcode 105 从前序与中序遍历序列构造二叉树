⭕️迭代
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        #使用中序遍历，确定该节点是上一个节点的左边的话，该节点是上一个节点的
        #左节点。如果是右节点的话，就要找离该节点最近的节点

        mapping = {}
        for i in range(len(inorder)):
            mapping[inorder[i]] = i

        root_val = preorder[0]
        root = TreeNode(root_val)
        stack = [root]
        inorder_index = 0

        for i in range(1, len(preorder)):
            child_val = preorder[i]
            parent_node = stack[-1]

            if mapping[child_val] < mapping[parent_node.val]:
                parent_node.left = TreeNode(child_val)
                stack.append(parent_node.left)
            else:
                # Find the nearest parent node for the right child
                while stack and inorder_index < len(inorder) and inorder[inorder_index] == stack[-1].val:
                    parent_node = stack.pop()
                    inorder_index += 1

                parent_node.right = TreeNode(child_val)
                stack.append(parent_node.right)

        return root
⭕️优化
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        #使用中序遍历，确定该节点是上一个节点的左边的话，该节点是上一个节点的
        #左节点。如果是右节点的话，就要找离该节点最近的节点

        root_val = preorder[0]
        root = TreeNode(root_val)
        stack = [root]
        inorder_index = 0

        for i in range(1, len(preorder)):
            child_val = preorder[i]
            parent_node = stack[-1]

            if parent_node.val != inorder[inorder_index]:
                parent_node.left = TreeNode(child_val)
                stack.append(parent_node.left)
            else:
                # Find the nearest parent node for the right child
                while stack and inorder_index < len(inorder) and inorder[inorder_index] == stack[-1].val:
                    parent_node = stack.pop()
                    inorder_index += 1

                parent_node.right = TreeNode(child_val)
                stack.append(parent_node.right)

        return root

在解决这个问题之前，我们需要理解先序遍历和中序遍历的特性：

先序遍历的顺序是：根节点 -> 左子树 -> 右子树
中序遍历的顺序是：左子树 -> 根节点 -> 右子树
那么，我们可以利用这些性质来解决这个问题：

先序遍历的第一个元素是根节点
在中序遍历序列中，根节点将序列分为两部分，左侧是左子树的节点，右侧是右子树的节点
对于Python，我们可以通过下面的代码来实现：


⭕️递归
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:
        if not preorder or not inorder:
            return None
            
        # The first node in preorder is the root node
        root_val = preorder[0]
        root = TreeNode(root_val)

        # The index of the root node in inorder
        mid_idx = inorder.index(root_val)

        # Recursively construct the left and right subtree
        root.left = self.buildTree(preorder[1:mid_idx+1], inorder[:mid_idx])
        root.right = self.buildTree(preorder[mid_idx+1:], inorder[mid_idx+1:])

        return root




