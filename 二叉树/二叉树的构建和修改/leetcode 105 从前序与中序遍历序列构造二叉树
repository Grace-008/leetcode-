⭕️迭代
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        #使用中序遍历，确定该节点是上一个节点的左边的话，该节点是上一个节点的
        #左节点。如果是右节点的话，就要找离该节点最近的节点

        mapping = {}
        for i in range(len(inorder)):
            mapping[inorder[i]] = i

        root_val = preorder[0]
        root = TreeNode(root_val)
        stack = [root]
        inorder_index = 0

        for i in range(1, len(preorder)):
            child_val = preorder[i]
            parent_node = stack[-1]

            if mapping[child_val] < mapping[parent_node.val]:
                parent_node.left = TreeNode(child_val)
                stack.append(parent_node.left)
            else:
                # Find the nearest parent node for the right child
                while stack and inorder_index < len(inorder) and inorder[inorder_index] == stack[-1].val:
                    parent_node = stack.pop()
                    inorder_index += 1

                parent_node.right = TreeNode(child_val)
                stack.append(parent_node.right)

        return root
⭕️优化
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        #使用中序遍历，确定该节点是上一个节点的左边的话，该节点是上一个节点的
        #左节点。如果是右节点的话，就要找离该节点最近的节点

        root_val = preorder[0]
        root = TreeNode(root_val)
        stack = [root]
        inorder_index = 0

        for i in range(1, len(preorder)):
            child_val = preorder[i]
            parent_node = stack[-1]

            if parent_node.val != inorder[inorder_index]:
                parent_node.left = TreeNode(child_val)
                stack.append(parent_node.left)
            else:
                # Find the nearest parent node for the right child
                while stack and inorder_index < len(inorder) and inorder[inorder_index] == stack[-1].val:
                    parent_node = stack.pop()
                    inorder_index += 1

                parent_node.right = TreeNode(child_val)
                stack.append(parent_node.right)

        return root

⭕️递归
class Solution:
    def buildTree(self, preorder, inorder):
        if not preorder or not inorder:
            return None
        return self.buildTreeHelper(preorder, inorder, 0, len(preorder) - 1, 0, len(inorder) - 1)

    def buildTreeHelper(self, preorder, inorder, pre_start, pre_end, in_start, in_end):
        if pre_start > pre_end or in_start > in_end:
            return None
        
        root_val = preorder[pre_start]
        root = TreeNode(root_val)

        root_index = inorder.index(root_val)
        left_size = root_index - in_start
        
        root.left = self.buildTreeHelper(preorder, inorder, pre_start + 1, pre_start + left_size, in_start, root_index - 1)
        root.right = self.buildTreeHelper(preorder, inorder, pre_start + left_size + 1, pre_end, root_index + 1, in_end)
        
        return root





