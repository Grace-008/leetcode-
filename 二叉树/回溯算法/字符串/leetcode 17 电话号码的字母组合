class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {'2': ['a', 'b', 'c'],
                 '3': ['d', 'e', 'f'],
                 '4': ['g', 'h', 'i'],
                 '5': ['j', 'k', 'l'],
                 '6': ['m', 'n', 'o'],
                 '7': ['p', 'q', 'r', 's'],
                 '8': ['t', 'u', 'v'],
                 '9': ['w', 'x', 'y', 'z']}
        
        if digits == "":
            return []
        
        res = []
        self.dfs(digits, phone, 0, "", res)
        return res
        
    def dfs(self, digits, phone, index, path, res):
        # 满足结束条件
        if len(path) == len(digits):
            res.append(path)
            return 
        
        # 递归调用
        for letter in phone[digits[index]]:
            self.dfs(digits, phone, index + 1, path + letter, res)
