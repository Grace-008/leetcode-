class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def is_valid(board, row, col, num):
            for i in range(9):
                if board[i][col] == num:  # Check column
                    return False
                if board[row][i] == num:  # Check row
                    return False
                if board[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num:  # Check 3x3 box
                    return False
            return True

        def solve(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        for num in map(str, range(1, 10)):
                            if is_valid(board, i, j, num):
                                board[i][j] = num
                                if solve(board):
                                    return True
                                else:
                                    board[i][j] = '.'  # Undo choice if it leads to no solution
                        return False  # Return False if no numbers can be placed in this cell
            return True  # Return True if the whole board is filled

        solve(board)


