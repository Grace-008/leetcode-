class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        if n<=0 or k<=0:
            return []

        res = []
        self.dfs(1, n, k, [], res)
        return res

    def dfs(self, start, n, k, path, res):
        if len(path) > k or sum(path) > n:
            return
        if len(path) == k and sum(path) == n:
            res.append(list(path))
            return
        

        for i in range(start, 10):
            path.append(i)
            self.dfs(i+1, n, k, path, res)
            path.pop()
