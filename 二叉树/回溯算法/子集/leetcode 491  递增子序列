

class Solution:
    def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        if not nums or len(nums) == 0:
            return []

        res = []
        self.dfs(0, nums, [], res)
        return res

    def dfs(self, start, nums, path, res):
        # If the current path has length >= 2, add it to the results
        if len(path) >= 2:
            res.append(list(path))
        
        # Used to prevent adding duplicate subsequences
        seen = set()
        for i in range(start, len(nums)):
           
            if nums[i] in seen:
                continue
            
            if not path or path[-1] <= nums[i]:
                seen.add(nums[i])
                path.append(nums[i])
                self.dfs(i + 1, nums, path, res)
                path.pop()
