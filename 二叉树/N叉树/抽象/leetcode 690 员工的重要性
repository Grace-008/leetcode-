⭕️dfs 前序遍历
class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        emap = {e.id: e for e in employees}
        
        def dfs(eid):
            employee = emap[eid]
            return employee.importance + sum(dfs(eid) for eid in employee.subordinates)
        
        return dfs(id)

⭕️dfs 后序遍历
class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        emap = {e.id: e for e in employees}

        def dfs(eid):
            subordinates_importance = sum(dfs(eid) for eid in emap[eid].subordinates)
            return emap[eid].importance + subordinates_importance

        return dfs(id)

⭕️bfs 层序遍历
class Solution:
    def getImportance(self, employees: List['Employee'], id: int) -> int:
        emap = {e.id: e for e in employees}
        total = 0
        queue = collections.deque([id])

        while queue:
            eid = queue.popleft()
            employee = emap[eid]
            total += employee.importance
            queue.extend(employee.subordinates)
        
        return total
