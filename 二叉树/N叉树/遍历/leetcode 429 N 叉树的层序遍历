⭕️BFS
class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        if not root:
            return []
        queue = deque([root])
        res = []
        while queue:
            level_size = len(queue)
            level = []
            for _ in range(level_size):
                node = queue.popleft()
                level.append(node.val)
                for child in node.children:
                    queue.append(child)
            res.append(level)
        return res
        
        
  ⭕️DFS
  class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        res = []
        self.dfs(root, 0, res)
        return res

    def dfs(self, node, level, res):
        if not node:
            return 

        if len(res)<=level:
            res.append([])
        res[level].append(node.val)

        for child in node.children:
            self.dfs(child, level+1, res)
