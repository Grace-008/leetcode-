⭕️层序遍历
class Solution:
    def connect(self, root):
        if not root:
            return root
        
        queue = [root]
        
        while queue:
            size = len(queue)
            
            for i in range(size):
                node = queue.pop(0)
                
                if i < size - 1:
                    node.next = queue[0]
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        
        return root
        
 ⭕双指针
 class Solution:
    def connect(self, root):
        if not root:
            return root
        
        leftmost = root  # leftmost node of the current level
        
        while leftmost.left:
            head = leftmost
            
            while head:
                # Connection 1: Connect the left child to the right child
                head.left.next = head.right
                
                # Connection 2: Connect the right child to the next node's left child
                if head.next:
                    head.right.next = head.next.left
                
                head = head.next
            
            leftmost = leftmost.left
        
        return root
        
 ⭕️前序遍历 递归
 class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':
        self.dfs(root)
        return root

    def dfs(self, node):
        if not node:
            return
        left = node.left
        right = node.right
        while left:
            left.next = right
            left = left.right
            right = right.left
        
        self.dfs(node.left)
        self.dfs(node.right)
