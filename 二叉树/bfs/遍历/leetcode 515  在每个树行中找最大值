⭕️BFS
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        result = []
        queue = deque([root])

        while queue:
            level_size = len(queue)
            max_value = float('-inf')

            for _ in range(level_size):
                node = queue.popleft()
                max_value = max(max_value, node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            result.append(max_value)

        return result

⭕️DFS
from typing import Optional, List

class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        res = []
        self.dfs(root, 0, res)
        return res
    
    def dfs(self, node, level, res):
        if node is None:
            return 
        
        if len(res) == level:
            res.append(node.val)
        else:
            res[level] = max(res[level], node.val)
        
        self.dfs(node.left, level + 1, res)
        self.dfs(node.right, level + 1, res)

