⭕️中序遍历
class Solution:
    def findMode(self, root):
        cur = 0  # 当前的数值
        count = 0  # 当前数值出现的次数
        maxCount = 0  # 目前出现最多的次数
        ans = []  # 结果数组

        def dfs(node):
            nonlocal cur, count, maxCount, ans
            if node is None:
                return
            dfs(node.left)  # 递归左子树
            update(node.val)  # 更新当前节点值的计数
            dfs(node.right)  # 递归右子树

        def update(x):
            nonlocal cur, count, maxCount, ans
            if x == cur:
                count += 1
            else:
                cur = x
                count = 1
            if count == maxCount:
                ans.append(cur)
            elif count > maxCount:
                maxCount = count
                ans = [cur]

        dfs(root)
        return ans

            
 ⭕️不用额外空间
 class Solution:
    def findMode(self, root):
        self.max_count = 0
        self.current_count = 0
        self.current_value = None
        self.modes = []
        
        def inorder(node):
            if node is None:
                return
            inorder(node.left)
            
            if node.val != self.current_value:
                self.current_count = 0
                self.current_value = node.val
                
            self.current_count += 1
            
            if self.current_count == self.max_count:
                self.modes.append(self.current_value)
            elif self.current_count > self.max_count:
                self.max_count = self.current_count
                self.modes = [self.current_value]
                
            inorder(node.right)
            
        inorder(root)
        return self.modes
