⭕️中序遍历
class Solution:
    def findMode(self, root: Optional[TreeNode]) -> List[int]:
        self.cur = 0  # 当前的数值
        self.count = 0  # 当前数值出现的次数
        self.maxCount = 0  # 目前出现最多的次数
        self.ans = []  # 结果数组
        self.dfs(root)
        return self.ans

    def dfs(self, node):
        if node is None:
            return
        self.dfs(node.left)  # 递归左子树
        self.update(node.val)  # 更新当前节点值的计数
        self.dfs(node.right)  # 递归右子树

    def update(self, x):
        if x == self.cur:
            self.count += 1
        else:
            self.cur = x
            self.count = 1
        if self.count == self.maxCount:
            self.ans.append(self.cur)
        elif self.count > self.maxCount:
            self.maxCount = self.count
            self.ans = [self.cur]
            
 ⭕️不用额外空间
 class Solution:
    def findMode(self, root):
        self.max_count = 0
        self.current_count = 0
        self.current_value = None
        self.modes = []
        
        def inorder(node):
            if node is None:
                return
            inorder(node.left)
            
            if node.val != self.current_value:
                self.current_count = 0
                self.current_value = node.val
                
            self.current_count += 1
            
            if self.current_count == self.max_count:
                self.modes.append(self.current_value)
            elif self.current_count > self.max_count:
                self.max_count = self.current_count
                self.modes = [self.current_value]
                
            inorder(node.right)
            
        inorder(root)
        return self.modes
