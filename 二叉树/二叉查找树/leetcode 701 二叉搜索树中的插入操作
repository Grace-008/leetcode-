⭕️迭代
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if not root:
            return TreeNode(val)
            
        curr_node = root
        while True:
            if curr_node.val < val:
                # Insert to the right subtree if there is a right child, else insert the value here.
                if curr_node.right:
                    curr_node = curr_node.right
                else:
                    curr_node.right = TreeNode(val)
                    break
            else:
                # Insert to the left subtree if there is a left child, else insert the value here.
                if curr_node.left:
                    curr_node = curr_node.left
                else:
                    curr_node.left = TreeNode(val)
                    break
        return root
 
 ⭕️递归
 class Solution:
    def insertIntoBST(self, root, val):
        if not root:
            return TreeNode(val)
        elif val > root.val:
            root.right = self.insertIntoBST(root.right, val)
        else:
            root.left = self.insertIntoBST(root.left, val)
        return root
