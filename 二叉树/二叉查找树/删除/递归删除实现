class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def remove_node(root, key):
    if root is None:
        return root

    # Traverse the tree to find the node to remove
    if key < root.value:
        root.left = remove_node(root.left, key)
    elif key > root.value:
        root.right = remove_node(root.right, key)
    else:
        # Case 1: No child or only one child
        if root.left is None:
            return root.right
        elif root.right is None:
            return root.left
        
        # Case 2: Two children
        # Find the inorder successor (smallest value in the right subtree)
        successor = find_min_node(root.right)
        # Copy the value from the inorder successor to the node to be deleted
        root.value = successor.value
        # Remove the inorder successor from the right subtree
        root.right = remove_node(root.right, successor.value)

    return root

def find_min_node(node):
    current = node
    while current.left is not None:
        current = current.left
    return current

