⭕️中序遍历
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        res = []
        self.dfs(root, res)
        for i in range(1,len(res)):
            if res[i]<=res[i-1]:
                return False

        return True


    def dfs(self, node, res):
        if not node:
            return 
        self.dfs(node.left, res)
        res.append(node.val)
        self.dfs(node.right, res)
        
        
⭕️迭代

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        stack = []
        cur = root
        pre = None
        while cur or stack:
            if cur: 
                stack.append(cur)
                cur = cur.left
            else:
                cur = stack.pop()
                if pre  and cur.val <= pre.val:
                    return False
                pre = cur
                cur = cur.right
        return True


⭕️递归
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def helper(node, lower=float('-inf'), upper=float('inf')):
            if not node:
                return True
            
            if node.val <= lower or node.val >= upper:
                return False

            if not helper(node.right, node.val, upper):
                return False
            if not helper(node.left, lower, node.val):
                return False

            return True

        return helper(root)
