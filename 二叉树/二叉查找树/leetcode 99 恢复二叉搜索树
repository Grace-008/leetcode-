⭕️中序遍历
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        self.prev = None
        self.x = None
        self.y = None
        self.inorder(root)
        self.x, self.y = self.y, self.x

    def inorder(self, node):
        if not node:
            return 
        self.inorder(node.left)
        if self.prev is not None and node.val<self.prev.val:
            self.y = node
            if self.x is None:
                self.x = self.prev
            else:
                return 

        self.prev = node


        self.inorder(node.right)
        
⭕️
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        stack = []
        x = y = pred = None
        curr  = root
        while stack or curr:
            while curr:
                stack.append(curr)
                curr = curr.left
            if stack:
                node = stack.pop()
                if pred and node.val < pred.val:
                    y = node
                    if x is None:
                        x = pred
                    else:
                        break

                pred = node
                curr = node.right
        x.val, y.val = y.val, x.val
