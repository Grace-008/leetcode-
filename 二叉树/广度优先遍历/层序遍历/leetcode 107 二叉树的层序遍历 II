⭕️BFS

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        queue = deque([root])
        result = []
        while queue:
            level = []
            for _ in range(len(queue)):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            result.append(level)
        return result[::-1]
        
 ⭕️递归
 class Solution:
    def levelOrderBottom(self, root):
        if not root:
            return []

        result = []
        self.traverse(root, 0, result)
        return result[::-1]

    def traverse(self, node, level, result):
        if not node:
            return

        # If the current level is not in the result list, add an empty list for that level
        if len(result) <= level:
            result.append([])

        # Append the node's value to the list at the current level
        result[level].append(node.val)

        # Recursively traverse the left and right subtrees
        self.traverse(node.left, level + 1, result)
        self.traverse(node.right, level + 1, result)
 
