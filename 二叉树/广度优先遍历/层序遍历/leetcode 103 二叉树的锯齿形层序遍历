⭕️BFS
class Solution:
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []
        queue = deque([root])
        output = []
        #the depth of the current level
        depth = 0
        while queue:
            level_size = len(queue)
            level = deque()
            #level_size checks the size of the current level
            for _ in range(level_size):
                node = queue.popleft()
                if depth % 2 == 0:
                    level.append(node.val)
                else:
                    level.appendleft(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            output.append(list(level))
            depth += 1
        return output
 ⭕️DFS
 class Solution:
    def zigzagLevelOrder(self,root):
        levels = []
        self.preorder(root, 0, levels)
        return levels
        
    def preorder(self, node: TreeNode, level: int, levels: List[List[int]]) -> None:
        if not node:
            return
        if len(levels) == level:
            levels.append([])
        if level % 2 == 0:
            levels[level].append(node.val)
        else:
            levels[level].insert(0, node.val)
        self.preorder(node.left, level + 1, levels)
        self.preorder(node.right, level + 1, levels)
