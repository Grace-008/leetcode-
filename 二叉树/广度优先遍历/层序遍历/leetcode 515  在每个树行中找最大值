⭕️BFS
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        result = []
        queue = deque([root])

        while queue:
            level_size = len(queue)
            max_value = float('-inf')

            for _ in range(level_size):
                node = queue.popleft()
                max_value = max(max_value, node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            result.append(max_value)

        return result

⭕️DFS
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        output = []
        self.preorder(root,0,output)
        return [max(level) for level in output]
    
    def preorder(self,node,level,output):
        if not node:
            return 
        if len(output)==level:
            output.append([])
        output[level].append(node.val)
        self.preorder(node.left,level+1,output)
        self.preorder(node.right,level+1,output)
