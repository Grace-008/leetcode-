⭕️BFS
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int: 
        if not root:
            return 0

        max_width = 0
        queue = deque([(root, 1)])  # Queue to store nodes and their positions

        while queue:
            level_size = len(queue)
            _, left_pos = queue[0]  # Get the leftmost node's position
            _, right_pos = queue[-1]  # Get the rightmost node's position
            max_width = max(max_width, right_pos - left_pos + 1)

            for _ in range(level_size):
                node, position = queue.popleft()

                if node.left:
                    queue.append((node.left, position * 2))
                if node.right:
                    queue.append((node.right, position * 2 + 1))

        return max_width
 
 ⭕️DFS
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        start = []
        end = []
        return self.dfs(root, 0, 1, start, end)

    def dfs(self, node, level, seqNo, start, end):
        if not node:
            return 0

        if level == len(start):
            start.append(seqNo)
            end.append(seqNo)
        else:
            end[level] = seqNo

        leftMaxWidth = self.dfs(node.left, level + 1, seqNo * 2, start, end)
        rightMaxWidth = self.dfs(node.right, level + 1, seqNo * 2 + 1, start, end)

        currWidth = end[level] - start[level] + 1
        return max(currWidth, max(leftMaxWidth, rightMaxWidth))

