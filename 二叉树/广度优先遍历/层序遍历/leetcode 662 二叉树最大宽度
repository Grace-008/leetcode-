⭕️BFS
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int: 
        if not root:
            return 0

        max_width = 0
        queue = deque([(root, 1)])  # Queue to store nodes and their positions

        while queue:
            level_size = len(queue)
            _, left_pos = queue[0]  # Get the leftmost node's position
            _, right_pos = queue[-1]  # Get the rightmost node's position
            max_width = max(max_width, right_pos - left_pos + 1)

            for _ in range(level_size):
                node, position = queue.popleft()

                if node.left:
                    queue.append((node.left, position * 2))
                if node.right:
                    queue.append((node.right, position * 2 + 1))

        return max_width
 
 ⭕️DFS
 class Solution(object):
    def widthOfBinaryTree(self, root):
        self.ans = 0
        left = {}
        def dfs(node, depth = 0, pos = 0):
            if node:
                left.setdefault(depth, pos)
                self.ans = max(self.ans, pos - left[depth] + 1)
                dfs(node.left, depth + 1, pos * 2)
                dfs(node.right, depth + 1, pos * 2 + 1)

        dfs(root)
        return self.ans
