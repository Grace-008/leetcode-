⭕️BFS
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        result = []
        queue = deque([root])

        while queue:
            level_size = len(queue)

            for i in range(level_size):
                node = queue.popleft()

                if i == level_size - 1:  
                    result.append(node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

        return result
 
 ⭕️DFS
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        rightmost_values = []
        self.preorder(root, 0, rightmost_values)
        return rightmost_values

    def preorder(self, current_node, current_depth, rightmost_values):
        if not current_node:
            return

        if current_depth == len(rightmost_values):
            rightmost_values.append(current_node.val)

        self.preorder(current_node.right, current_depth + 1, rightmost_values)
        self.preorder(current_node.left, current_depth + 1, rightmost_values)

