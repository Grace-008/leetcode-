⭕️BFS
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        result = []
        queue = deque([root])

        while queue:
            level_size = len(queue)

            for i in range(level_size):
                node = queue.popleft()

                if i == level_size - 1:  
                    result.append(node.val)

                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

        return result
 
 ⭕️DFS
 class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
        result = []
        self.dfs(root, 0, result)
        return result

    def dfs(self, node: TreeNode, depth: int, result: List[int]) -> None:
        if not node:
            return

        if depth == len(result):
            result.append(node.val)

        self.dfs(node.right, depth + 1, result)
        self.dfs(node.left, depth + 1, result)
