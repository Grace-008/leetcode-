
▶️必须是有序数组

⭕️迭代
▶️时间复杂度O(log(n))
▶️空间复杂度O(1)
def binary_search(array, target):
    if len(array) == 0 or array == None:
        return False
    
    left,right=0,len(array)-1
  
    while left <= right:
        mid = left + (right - left) // 2
        if array[mid] == target:
            return True
        elif array[mid] < target:
            left = mid + 1
        elif array[mid] > target:
            right = mid - 1
       
    return False
        
 ⭕️递归
▶️时间复杂度O(log(n))
▶️空间复杂度O(log(n))
▶️递归需要满足的三个条件：
一个问题的解可以分解为几个子问题的解；
这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样；
存在递归终止条件。

def constains(nums,left,right,target):
    if left>right: return False
    mid = left + (right-left)//2
    if nums[mid]==target: return True
    elif (target<nums[mid]): return constains(nums,left,mid-1,target)
    else: return constains(nums,mid+1,right,target)
    
def containsR(nums,target):
    if (nums==null or len(nums)==0): return False
    return constains(nums,0,len(nums)-1,target)
    

