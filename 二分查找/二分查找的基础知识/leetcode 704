⭕️思路1:在循环体中查找目标元素
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        #创建双指针
        left = 0
        right = len(nums) - 1
        #循环遍历整个数组
        while left <= right:
            #将数组一分为二
            mid = left + (right-left)//2
            #判断target和中间值
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                right = mid-1
            else:
                left = mid+1
        return -1

⭕️思路2:在循环体中排除一定不存在目标元素的区间

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)-1
        while left < right:
            mid = left + (right - left) // 2
            if target < nums[mid]:
                right=mid
            elif if nums[mid]<target:
                left = mid+1
            else:
                return mid
        return -1

⭕️思路2:在循环体中排除一定不存在目标元素的区间
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left,right=0,len(nums)-1
        while left<=right:
            #为了避免进入死循环
            mid=left+(right-left+1)//2
            if target<nums[mid]:
                right=mid-1
            else:
                left=mid
        if nums[left]==target:
            return left
        else:
            return -1
