from typing import List


class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        upper = self.upperBound(nums, target)
        low = self.lowerBound(nums, target)
        
        # If target is not found, return [-1, -1]
        if upper < low:
            return [-1, -1]
        
        return [low, upper]
    
    def lowerBound(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + ((right - left) >> 1)
            if target <= nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        
        return left
    
    def upperBound(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + ((right - left) >> 1)
            if target >= nums[mid]:
                left = mid + 1
            else:
                right = mid - 1
        
        return right
        
nums = [5, 7, 7, 8, 8, 8, 12, 16]
target = 8
sol = Solution()
result = sol.searchRange(nums, target)
print(result)  # Output: [3, 4]
