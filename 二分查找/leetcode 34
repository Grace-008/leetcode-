'''
找出目标元素的下边界和目标元素的上边界
求下边界时，将小于和等于合并在一起处理，当 target <= nums[mid] 时，我们都移动右指针，也就是 right = mid -1，
还有一个需要注意的就是，我们计算下边界时最后的返回值为 left 


'''

from typing import List


class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        #求下边界
        upper = self.upperBound(nums,target)
        #求上边界
        low = self.lowerBound(nums,target)

        if upper<low:
            return [-1,-1]

        return[low,upper]

    def upperBound(self,nums:List[int], target:int) -> int:
            #创建双指针
            left = 0
            right = len(nums)-1
            #循环遍历数组
            while left <= right:
                mid = left + (right-left)//2
                if nums[mid]<=target:
                    left = mid + 1                   
                else:
                    right = mid-1
                    
            return right
        
    def lowerBound(self,nums:List[int],target:int) -> int:
            left = 0
            right = len(nums)-1
            while left <= right:
                mid = left + (right-left)//2
                if nums[mid] >= target:
                    right = mid - 1
                else:
                    left = mid + 1
            return left

       
        
nums = [5,7,7,8,8,10]
target = 8
sol = Solution()
result = sol.searchRange(nums, target)
print(result)  # Output: [3,4]
