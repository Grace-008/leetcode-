https://leetcode.cn/problems/search-a-2d-matrix/submissions/

'''
我们需要从一个二维矩阵中，搜索是否含有元素 7，我们如何使用二分查找呢？

其实我们可以完全将二维矩阵想象成一个有序的一维数组，比如我们的二维矩阵中，共有 9 个元素，那定义我们的 left = 0，right = 9 - 1= 8，是不是和一维数组定义相同，

然后我们求我们的 mid 值， mid = left +（(right - left) >> 1）此时 mid = 4 ，

但是我们的二维矩阵下标最大是，nums[2,2]呀，你这求了一个 4 ，让我们怎么整呀。

如果我们理解了二分查找，那么这个题目考察我们的应该是如何将一维数组的下标，变为二维坐标。

其实也很简单，咱们看哈，此时咱们的 mid = 4，咱们的二维矩阵共有 3 行， 3 列，那我们 mid =4，肯定在第二行，那么这个应该怎么求得呢?

我们可以直接用 （mid/列数），即可，因为我们 mid = 4，4 /3 = 1,说明在 在第二行，那如果 mid = 7 ，7/3=2，在第三行，我们第几行知道了，

那么我们如何知道第几列呢？我们可以直接根据 （mid % 列数 ）来求得呀，比如我们此时 mid = 7，7%3 = 1，那么在我们一维数组索引为 7 的元素，其处于二维数组的第 2 列

'''

from typing import List

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        #1.如果不是matrix的话
        if not matrix:
            return False
        #2.当是matrix的话
        #创建双指针
        #为了创建right，求row和col
        row = len(matrix)
        col = len(matrix[0])
        left = 0
        right = row * col - 1
        #循环遍历数组
        while left <= right:
            mid = (left + right) // 2
            #将mid转换成rownum和colnum
            rownum = mid // col
            colnum = mid % col
            if matrix[rownum][colnum] == target:
                return True
            elif matrix[rownum][colnum] > target:
                right = mid - 1
            else:
                left = mid + 1
        return False

        
matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target = 3
sol = Solution()
result = sol.searchMatrix(nums)
print(result)  # Output: True
