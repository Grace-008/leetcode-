⭕️排序解法
▶️时间复杂度 O(nlogn)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        nums.sort()
        return nums[len(nums)-k]
        
⭕️小顶堆
▶️时间复杂度O（nlogn）
# 将k个最大元素存储在某一种数据结构中，在此数据结构中找到最小值
# 为了能够快速地拿到最小值，使用小顶堆，此时堆顶就是第k个最大元素

def findKthLargest(nums, k):
    heap = []

    for num in nums:
        heapq.heappush(heap, num)
        if len(heap) > k:
            heapq.heappop(heap)

    return heap[0]


⭕️另外一种小顶堆的方式
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        heap = []
        for num in nums:
            if len(heap) == k:
                if num > heap[0]:
                    heapq.heapreplace(heap, num)
            else:
                heapq.heappush(heap, num)
        return heap[0]


⭕️对k值过大的优化
from typing import List
import heapq

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        n = len(nums)
        #使用小顶堆，当k比较小的时候
        if k < n-k:
            pq = []
            for i in range(n):
                heapq.heappush(pq,nums[i])
                if len(pq)>k:
                    heapq.heappop(pq)
            return pq[0]
        #当题目是在100000个数字里面，找到k=999996的数字，将问题转换成找到第n-k+1（5）小的元素
        #使用大顶堆
        else:
            capacity = n-k+1
            pq = []
            for i in range(n):
                heapq.heappush(pq,-nums[i])
                if len(pq)>capacity:
                    heapq.heappop(pq)
            return -pq[0]
            
⭕️快排
class Solution:
    def findKthLargest(self,nums, k):
        left = 0
        right = len(nums) - 1

        while True:
            pivot_index = self.partition(nums, left, right)
            if pivot_index == k - 1:
                return nums[pivot_index]
            elif pivot_index > k - 1:
                right = pivot_index - 1
            else:
                left = pivot_index + 1

    def partition(self,nums, left, right):
        pivot = nums[left]
        low = left + 1
        high = right

        while True:
            while low <= high and nums[low] >= pivot:
                low += 1
            while low <= high and nums[high] <= pivot:
                high -= 1
            if low <= high:
                nums[low], nums[high] = nums[high], nums[low]
            else:
                break

        nums[left], nums[high] = nums[high], nums[left]
        return high


