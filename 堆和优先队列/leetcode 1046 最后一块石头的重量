⭕️排序解法
▶️每次都进行比较，然后将最大和第二大进行粉碎
时间复杂度 O（n^2logn）
class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        #排序解法，最多的时候要比较len(stones)-1次
        n = len(stones)
        for i in range(n-1):
            stones.sort()
            #最大值
            y = stones[n-1]
            #倒二大值
            x = stones[n-2]
            #只剩下一块石头
            if x == 0: break
            stones[n-1] = y-x
            stones[n-2] = 0
        return stones[n-1]
        
        
 ⭕️大顶堆
 ▶️性能瓶颈在于找到最大和第二大的值
 ▶️时间复杂度：O（nlogn）
 #将粉碎的值重新放到大顶堆中，进行比较
import heapq

def lastStoneWeight(stones):
    max_heap = [-stone for stone in stones]  # Max heap to store negative weights
    heapq.heapify(max_heap)

    while len(max_heap) > 1:
        stone1 = -heapq.heappop(max_heap)
        stone2 = -heapq.heappop(max_heap)

        if stone1 != stone2:
            heapq.heappush(max_heap, -(stone1 - stone2))

    if max_heap:
        return -max_heap[0]
    else:
        return 0
