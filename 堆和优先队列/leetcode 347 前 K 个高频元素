⭕️小顶堆
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency = {}
        for num in nums:
            if num in frequency:
                frequency[num] += 1
            else:
                frequency[num] = 1
        
        heap = []
        for num,freq in frequency.items():
            heapq.heappush(heap,(freq,num))
            if len(heap)>k:
                heapq.heappop(heap)
        
        result = [item[1] for item in heap]
        return result[::-1]
        
⭕️快速排序
from collections import Counter
from typing import List
import random

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency_map = Counter(nums)
        freq_list = [(num, freq) for num, freq in frequency_map.items()]
        left = 0
        right = len(freq_list) - 1

        while True:
            pivot_index = self.partition(freq_list, left, right)
            if pivot_index == k - 1:
                return [num for num, _ in freq_list[:k]]
            elif pivot_index > k - 1:
                right = pivot_index - 1
            else:
                left = pivot_index + 1

    def partition(self, nums, left, right):
        pivot_index = random.randint(left, right)
        nums[left], nums[pivot_index] = nums[pivot_index], nums[left]
        pivot = nums[left][1]  # Compare frequencies
        low = left + 1
        high = right

        while True:
            while low <= high and nums[low][1] > pivot:  # Greater frequencies go left
                low += 1
            while low <= high and nums[high][1] < pivot:  # Lesser frequencies go right
                high -= 1
            if low <= high:
                nums[low], nums[high] = nums[high], nums[low]
            else:
                break

        nums[left], nums[high] = nums[high], nums[left]
        return high

