⭕️小顶堆
import heapq

def topKFrequent(nums, k):
    frequency = {}
    for num in nums:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1

    heap = []
    for num, freq in frequency.items():
        if len(heap) < k:
            heapq.heappush(heap, (freq, num))
        else:
            if freq > heap[0][0]:
                heapq.heappop(heap)
                heapq.heappush(heap, (freq, num))

    result = [item[1] for item in heap]
    return result[::-1]

⭕️快速排序
from typing import List
from collections import Counter

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency_map = Counter(nums)
        freq_list = [(num, freq) for num, freq in frequency_map.items()]

        left = 0
        right = len(freq_list) - 1

        while True:
            pivot_index = self.partition(freq_list, left, right)
            if pivot_index == k - 1:
                return [num for num, _ in freq_list[:k]]
            elif pivot_index > k - 1:
                right = pivot_index - 1
            else:
                left = pivot_index + 1

    def partition(self, nums: List[tuple], left: int, right: int) -> int:
        pivot = nums[left][1]
        low = left + 1
        high = right

        while True:
            while low <= high and nums[low][1] >= pivot:
                low += 1
            while low <= high and nums[high][1] <= pivot:
                high -= 1
            if low <= high:
                nums[low], nums[high] = nums[high], nums[low]
            else:
                break

        nums[left], nums[high] = nums[high], nums[left]
        return high
