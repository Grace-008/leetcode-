⭕️暴力解法
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res=[]
        for num1 in nums1:
           for num2 in nums2:
               if num1==num2:
                   if num1 not in res:
                       res.append(num1)
        return res
 
 ⭕️去重优化
 class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res = set()
        for num1 in nums1:
           for num2 in nums2:
               if num1==num2:
                   #去重，使用set
                    res.add(num1)
        return list(res)

⭕️使用二分查找，减少时间复杂度 O(nlogm)
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res = set()
        for num1 in nums1:
            #使用二分查找，减少时间复杂度
           if self.binarysearch(nums2,num1):
                #去重，使用set
                res.add(num1)
        return list(res)

    def binarysearch(self,nums,target):
        left = 0
        right = len(nums)-1
        while left<=right:
            mid = left + (right-left)//2
            if nums[mid]==target:
                return True
            elif nums[mid]<target:
                left = mid+1
            else:
                right = mid-1
        return False
                
⭕️优化，哈希查找 O(n+m)
def intersection(nums1, nums2):
    hashmap = {}
    result = []
    
    # Populate hashmap with elements from nums1
    for num in nums1:
        hashmap[num] = True
    
    # Check if elements in nums2 are present in the hashmap
    for num in nums2:
        if num in hashmap:
            result.append(num)
            del hashmap[num]  # Remove the element from hashmap to avoid duplicates
    
    return result

⭕️除了哈希去重，也可以排序去重 O(n log n + m log m)
class Solution:
    def intersection(self, nums1, nums2):
        # Sort the arrays
        nums1.sort()
        nums2.sort()
        
        # Initialize two pointers for nums1 and nums2
        i = 0
        j = 0
        
        # Initialize an empty result array
        result = []
        
        # Iterate through both arrays
        while i < len(nums1) and j < len(nums2):
            # If the elements are equal, add it to the result array
            if nums1[i] == nums2[j]:
                # Add the element to the result array if it's not already present
                if not result or result[-1] != nums1[i]:
                    result.append(nums1[i])
                i += 1
                j += 1
            # If the element in nums1 is smaller, move the nums1 pointer forward
            elif nums1[i] < nums2[j]:
                i += 1
            # If the element in nums2 is smaller, move the nums2 pointer forward
            else:
                j += 1
        
        return result
