'''
反转后半部分链表
'''

class ListNode:
  def __init__(self,val=0,next=None):
    self.val=val
    self.next=next

def isPalindrome(head:ListNode)->bool:
  fast,slow=head,head
  #通过快慢指针找到中点
  while fast and fast.next:
    fast=fast.next.next;
    slow=slow.next
  #如果fast不为空，说明链表的长度是奇数个
  if fast:
    slow=slow.next
  #反转后半部分链表
  slow = reverse(slow)
  #开始进行比较
  fast=head
  while slow:
    if fast.val !=slow.val:
      return False
    fast=fast.next
    slow=slow.next
  return True
  

def reverse(head:ListNode)->ListNode:
  newHead=None
  while head:
    temp=head.next
    head.next=newHead
    newHead=head
    head=temp
  return newHead

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def isPalindrome(head: ListNode) -> bool:
    fast, slow = head, head
    # 通过快慢指针找到中点
    while fast and fast.next:
        fast = fast.next.next
        slow = slow.next
    # 如果fast不为空，说明链表的长度是奇数个
    if fast:
        slow = slow.next
    # 反转后半部分链表
    slow = reverse(slow)
    fast = head
    while slow:
        # 然后比较，判断节点值是否相等
        if fast.val != slow.val:
            return False
        fast = fast.next
        slow = slow.next
    return True

# 反转链表
def reverse(head: ListNode) -> ListNode:
    prev = None
    while head:
        next_node = head.next
        head.next = prev
        prev = head
        head = next_node
    return prev

# Create a test case
head = ListNode(1, ListNode(2, ListNode(3, ListNode(2, ListNode(1)))))

# Test the function
print(isPalindrome(head)) # Output: True

'''
使用栈解决
'''
class ListNode:
  def __init__(self,val=0,next=None):
    self.val=val
    self.next=next
  
def isPalindrome(head:ListNode)->bool:
  if not head:
    return True
  temp=head
  stack=[]
  #链表的长度
  leng=0
  #存入栈中
  while temp:
    stack.append(temp.val)
    temp=temp.next
    leng+=1
  #长度除以2
  leng//=2
  #出栈
  while leng>0:
    if head.val != stack.pop():
      return False
    head=head.next
    leng-=1
  return True

# Create a test case
head = ListNode(1, ListNode(2, ListNode(3, ListNode(2, ListNode(1)))))

# Test the function
print(isPalindrome(head)) # Output: True

'''

'''

