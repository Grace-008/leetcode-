⭕️
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        length = 0
        curr = head
        while curr:
            length +=1
            curr = curr.next
        
        width = length // k
        remainder = length % k


        curr = head
        res = [None] * k  # Initialize the result array

        for i in range(k):
            dummy = ListNode(-1)
            node = dummy
            realWidth = width + (1 if i < remainder else 0)
            for j in range(realWidth):
                if curr:
                    node.next = ListNode(curr.val)
                    curr = curr.next
                    node = node.next

            res[i] = dummy.next

        return res

⭕️优化
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        length = 0
        curr = head
        while curr:
            length += 1
            curr = curr.next

        part_size = length // k
        remaining_node = length % k

        result = [None]*k
        curr = head
        for i in range(k):
            result[i] = curr

            real_size = part_size + (1 if i < remaining_node else 0)
            for j in range(real_size):
                if j == real_size - 1 and curr:
                    next_node = curr.next
                    curr.next = None
                    curr = next_node
                elif curr:
                    curr = curr.next
        return result
