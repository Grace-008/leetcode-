⭕️
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        length = 0
        curr = head
        while curr:
            length +=1
            curr = curr.next
        
        width = length // k
        remainder = length % k


        curr = head
        res = [None] * k  # Initialize the result array

        for i in range(k):
            dummy = ListNode(-1)
            node = dummy
            realWidth = width + (1 if i < remainder else 0)
            for j in range(realWidth):
                if curr:
                    node.next = ListNode(curr.val)
                    curr = curr.next
                    node = node.next

            res[i] = dummy.next

        return res

⭕️优化
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:     
        # Step 1: Find the length of the linked list
        length = 0
        curr = head
        while curr:
            length += 1
            curr = curr.next

        # Step 2: Calculate the size of each part and the number of longer parts
        part_size = length // k
        longer_parts = length % k

        # Step 3: Split the linked list into k parts
        curr = head
        result = []
        for _ in range(k):
            result.append(curr)  # Add the current head of the part to the result
            part_length = part_size + (1 if longer_parts > 0 else 0)
            for _ in range(part_length - 1):
                if curr:
                    curr = curr.next
            if curr:
                next_node = curr.next
                curr.next = None  # Disconnect the end of the current part
                curr = next_node

        return result
