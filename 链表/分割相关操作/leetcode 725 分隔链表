⭕️
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
        length = 0
        curr = head
        while curr:
            length +=1
            curr = curr.next
        
        width = length // k
        remainder = length % k


        curr = head
        res = [None] * k  # Initialize the result array

        for i in range(k):
            dummy = ListNode(-1)
            node = dummy
            realWidth = width + (1 if i < remainder else 0)
            for j in range(realWidth):
                if curr:
                    node.next = ListNode(curr.val)
                    curr = curr.next
                    node = node.next

            res[i] = dummy.next

        return res

⭕️优化
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def splitListToParts(self, head: Optional[ListNode], k: int) -> List[Optional[ListNode]]:
    # Count the number of nodes in the linked list
        node_count = 0
        curr = head
        while curr:
            node_count += 1
            curr = curr.next
        
        # Calculate the size of each part and the number of remaining nodes
        part_size = node_count // k
        remaining_nodes = node_count % k
        
        # Initialize the result array
        result = [None] * k
        
        # Split the linked list into parts
        curr = head
        prev = None
        for i in range(k):
            result[i] = curr
            
            # Determine the size of the current part
            size = part_size
            if remaining_nodes > 0:
                size += 1
                remaining_nodes -= 1
            
            # Traverse the current part and detach it from the rest of the list
            for j in range(size):
                prev = curr
                curr = curr.next
            
            if prev:
                prev.next = None
        
        return result

