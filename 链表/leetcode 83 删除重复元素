'''
图文讲解

https://leetcode.cn/problems/remove-duplicates-from-sorted-list/solution/dong-hua-yan-shi-83-shan-chu-pai-xu-lie-lhuvr/
'''

易错点
1.为什么while if当中cur=cur.next
the code I provided doesn't have an explicit cur = cur.next statement in the while and if blocks. However, the cur variable is still being updated implicitly in the if block where the next pointer is updated.

Here's what's happening:

In the while loop, the cur variable is pointing to the current node, and cur.next is pointing to the next node. If the values of the current and next nodes are the same, the if block is executed and the next pointer of the current node is updated to skip over the next node.

When this happens, the cur variable is still pointing to the same node (i.e., the current node), but its next pointer has been updated to skip over the next node. So effectively, the cur variable has been updated to point to the node after the one that was just removed.

If the values of the current and next nodes are different, the else block is executed, and the cur variable is updated to point to the next node explicitly using cur = cur.next.

So even though the cur variable is not being updated explicitly in the if block, it is still being updated implicitly by the update to its next pointer.

2.为什么while cur and cur.next
The reason why the condition for the while loop is while cur and cur.next instead of just while cur is that the cur.next check is necessary to prevent a NoneType error when trying to access the val attribute of the next node.

In this implementation, the cur variable is initialized to point to the head of the linked list, and the loop continues until cur becomes None, which happens when it reaches the end of the list.

However, if the loop were only checking for while cur, then in the if block where the next pointer is updated, the cur.next reference could potentially be None, which would raise an AttributeError when trying to access its val attribute.

By checking for while cur and cur.next, we ensure that the cur.next reference is not None before trying to access its val attribute, which prevents the AttributeError. This way, we can safely traverse the linked list and remove any duplicate nodes without any errors.



class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        cur = head
        # cur所指向的结点和其后一个结点都不为None时
        # 才可能有重复结点存在
        while cur and cur.next:
            if cur.next.val == cur.val:
                cur.next = cur.next.next
            else:
                cur = cur.next
        return head

# example usage
head = ListNode(1)
head.next = ListNode(1)
head.next.next = ListNode(2)
head.next.next.next = ListNode(2)
head.next.next.next.next = ListNode(4)
head.next.next.next.next.next = ListNode(5)

sol = Solution()
new_head = sol.deleteDuplicates(head)

while new_head:
    print(new_head.val, end=' ')
    new_head = new_head.next
