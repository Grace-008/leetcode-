class Solution:
    def insertionSortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Base case: If the list is empty or contains only one node, return the head
        if not head or not head.next:
            return head

        # Create a dummy node as the new head of the sorted list
        dummy = ListNode(0)
        dummy.next = head

        # Pointer to iterate over the original list
        curr = head

        while curr and curr.next:
            if curr.val > curr.next.val:
                # Find the correct position to insert the current node
                prev = dummy
                while prev.next.val < curr.next.val:
                    prev = prev.next

                # Perform the insertion by rearranging the pointers
                temp = curr.next
                curr.next = temp.next
                temp.next = prev.next
                prev.next = temp
            else:
                # No need to insert, move to the next node
                curr = curr.next

        return dummy.next
