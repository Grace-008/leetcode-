# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if head is None or head.next is None or k==0 or k==1:
            return head

        dummy = ListNode(-1)
        dummy.next = head

        prev = dummy
        first = head
        last = first

        while first:
            for i in range(k-1):
                last = last.next
                if last is None:
                    return dummy.next
            next = last.next
            last.next = None
            self.reverse(first)
            prev.next = last
            first.next = next

            prev = first
            first = next
            last = first

        return dummy.next

    def reverse(self,head):
        if not head or not head.next:
            return head
        
        new_head = self.reverse(head.next)
        head.next.next = head
        head.next = None
        return new_head
