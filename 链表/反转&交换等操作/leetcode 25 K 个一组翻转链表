# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        if not head or k == 1:
            return head

        # 1. 计算链表长度
        length = 0
        temp = head
        while temp:
            length += 1
            temp = temp.next
        
        dummy = ListNode(0)
        dummy.next = head
        prev_group_end = dummy  # 上一组的最后一个节点

        while length >= k:  # 只有当剩余节点数大于等于k时才进行翻转
            group_start = prev_group_end.next
            curr = group_start

            # 2. 分段翻转
            prev = None
            for _ in range(k):
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node

            # 3. 连接各段
            group_start.next = curr
            prev_group_end.next = prev
            prev_group_end = group_start

            length -= k

        return dummy.next

