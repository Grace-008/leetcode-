⭕️克隆链表-迭代
class Solution:
    def copyList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if head is None:
            return None

        old_node = head
        new_node = ListNode(old_node.val)
        new_head = new_node
        while old_node and old_node.next:
            new_node.next = ListNode(old_node.next.val)
            old_node = old_node.next
            new_node = new_node.next

        return new_head
        
 ⭕️克隆链表-递归
 class Solution:
    def copyList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if head is None:
            return None
        
        new_node = ListNode(head.val)
        p = self.copyRandomList(head.next)
        new_node.next = p
        return new_node
        
⭕️克隆链表-栈

class Solution:
    def copyList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if head is None:
            return None
        stack = []
        while head:
            stack.append(head)
            head = head.next

        new_head = None
        while stack:
            curr = stack.pop()
            new_node = ListNode(curr.val)
            new_node.next = new_head
            new_head = new_node
        
        return new_head
        
⭕️递归
"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if not head:
            return None
        
        copies = {}
        return self.copyNode(head, copies)
    
    def copyNode(self, node: 'Node', copies: dict) -> 'Node':
        if not node:
            return None
        
        if node in copies:
            return copies[node]
        
        new_node = Node(node.val)
        copies[node] = new_node
        
        new_node.next = self.copyNode(node.next, copies)
        new_node.random = self.copyNode(node.random, copies)
        
        return new_node

⭕️迭代
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if head is None:
            return None

        node_map = {}  # Hash map to store the mapping between original nodes and their clones

        old_node = head
        new_node = Node(old_node.val)
        new_head = new_node
        node_map[old_node] = new_node  # Store the mapping of the first node

        while old_node:
            new_node.next = self.get_clone_node(old_node.next, node_map)
            new_node.random = self.get_clone_node(old_node.random, node_map)
            old_node = old_node.next
            new_node = new_node.next

        return new_head

    def get_clone_node(self, node, node_map):
        if node is None:
            return None
        if node in node_map:
            return node_map[node]
        else:
            node_map[node] = Node(node.val)
            return node_map[node]
            
