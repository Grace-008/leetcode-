# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        # Base case: If the list is empty or contains only one node, return the head
        if not head or not head.next:
            return head

        # Find the middle of the list
        middle = self.findMiddle(head)
        mid_next = middle.next
        middle.next = None

        # Recursively sort the left and right halves of the list
        left = self.sortList(head)
        right = self.sortList(mid_next)

        # Merge the sorted left and right halves
        return self.merge(left, right)

    def findMiddle(self, head: ListNode) -> ListNode:
        slow = head
        fast = head.next

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        return slow

    def merge(self, left: ListNode, right: ListNode) -> ListNode:
        dummy = ListNode()
        curr = dummy

        while left and right:
            if left.val <= right.val:
                curr.next = left
                left = left.next
            else:
                curr.next = right
                right = right.next

            curr = curr.next

        curr.next = left if left else right

        return dummy.next
