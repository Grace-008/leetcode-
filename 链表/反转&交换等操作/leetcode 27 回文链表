# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return True

        slow = fast = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next

        new_head = self.reverse(slow)

        fast = head
        while new_head:
            if fast.val != new_head.val:
                return False

            fast = fast.next
            new_head = new_head.next
        return True
    
    def reverse(self, head):
        if not head or not head.next:
            return head  # Here is the correction
        new_head = self.reverse(head.next)
        head.next.next = head
        head.next = None
        return new_head
