# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self,head):
        if not head or not head.next:
            return True

        slow = fast = head

        # Find the middle of the linked list
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # Reverse the second half of the linked list
        prev = None
        while slow:
            next_node = slow.next
            slow.next = prev
            prev = slow
            slow = next_node

        # Compare values of the first and second half of the linked list
        fast = head
        while prev:
            if fast.val != prev.val:
                return False
            fast = fast.next
            prev = prev.next

        return True
