⭕️dfs
class Solution:
    def jump(self, nums: List[int]) -> int:
        self.minSteps = float('inf')
        self.dfs(nums,0,[])
        return 0 if self.minSteps == float('inf') else self.minSteps


    def dfs(self, nums, jumpedIndex, path):
        if jumpedIndex==len(nums)-1:
            self.minSteps = min(self.minSteps,len(path))
            return 

        for i in range(1, nums[jumpedIndex]+1):
            if jumpedIndex+i >= len(nums):
                continue

            path.append(i)
            self.dfs(nums, jumpedIndex+i, path)
            path.pop()

⭕️贪心算法
class Solution:
    def jump(self, nums: List[int]) -> int:
        if len(nums) == 1: 
            return 0

        start = end = steps = 0

        while end < len(nums) - 1:
            maxPos = 0
            for i in range(start, end + 1):
                maxPos = max(maxPos, i + nums[i])
            start = end + 1
            end = maxPos
            steps += 1
        
        return steps
初始化 steps, max_pos 和 end 都为 0。其中 steps 用来计数需要跳跃的次数，max_pos 用来保存能跳到的最远位置，end 用来保存当前步能跳到的最远位置。

开始遍历数组中的元素，注意范围是 len(nums) - 1，因为在到达最后一个元素之前，跳跃的步数就已经被计算出来了。

对于每一个位置 i，都计算出从这一步能跳到的最远位置 nums[i] + i，并更新 max_pos。

判断当前位置 i 是否等于 end，也就是是否已经到达了当前步能跳到的最远位置。如果是，就表示需要跳一步才能继续前进。所以增加 steps 的计数，然后更新 end 为 max_pos，表示下一步能跳到的最远位置就是之前能跳到的最远位置。

重复步骤 3 和 4，直到遍历完所有元素。

返回 steps，它就是需要的最小跳跃次数。

这种方法之所以可行，是因为在每一步都尽可能跳最远，所以每一步都是最优的，从而得到全局最优解。这是贪心算法的思想。

⭕️优化
def jump(nums):
    steps = max_pos = end = 0
    for i in range(len(nums) - 1):
        max_pos = max(max_pos, nums[i] + i)
        if i == end:
            end = max_pos
            steps += 1
    return steps

