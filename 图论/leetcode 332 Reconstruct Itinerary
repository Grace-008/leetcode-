class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """

        # Step 1: Construct the adjacency list
        graph = defaultdict(list)
        for src, dst in sorted(tickets, reverse=True):  # Reverse order because we'll pop from the end
            graph[src].append(dst)

        itinerary = []

        # Step 3: DFS
        def dfs(airport):
            while graph[airport]:
                next_airport = graph[airport].pop()
                dfs(next_airport)
            itinerary.append(airport)

        dfs("JFK")
        return itinerary[::-1]  # reverse to get the right order
