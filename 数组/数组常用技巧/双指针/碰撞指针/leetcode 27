https://leetcode-cn.com/problems/remove-element/

'''
暴力解法
'''

def removeElement(self, nums:List[int], val:int) -> int:
  leng = len(nums)
  #当数组不存在时
  if 0==leng:
    return 0
  #当数组存在时
  #遍历循环数组
  i=0
  while i<leng:
    #当发现符合条件的情况
    if nums[i] == val:
      #前移
      for j in range(i,leng-1):
        nums[j] = nums[j+1]
      #为了后续重新验证i的值
      i-=1
      #长度-1
      leng-=1
    i+=1
  return leng

nums = [2,3,2,3,5,3]
val = 3
sol = Solution()
result = sol.removeElement(nums, val)
print(result)  # Output: 3

'''
双指针
'''
'''

快慢指针的做法
只需要一个 for 循环即可解决，时间复杂度为 O(n) 
总体思路就是有两个指针，前面一个后面一个，
前面的用于搜索需要删除的值，当遇到需要删除的值时，前指针直接跳过，后面的指针不动，
当遇到正常值时，两个指针都进行移动，并修改慢指针的值。最后只需输出慢指针的索引即可。

'''

from typing import List

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:   
        #创建快慢指针，其中一个指针用来遍历循环数组
        i = 0
        for j in range(len(nums)):
            if nums[j] != val:
                nums[i] = nums[j]
                i += 1
        return i

nums = [2,3,2,3,5,3]
val = 3
sol = Solution()
result = sol.removeElement(nums, val)
print(result)  # Output: 2

