class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""

        # This function will return the longest palindrome centered around the indices l and r
        def expand_around_center(l: int, r: int) -> str:
            while l >= 0 and r < len(s) and s[l] == s[r]:
                l -= 1
                r += 1
            return s[l+1:r]  # Note: we added 1 to l because the loop stops when s[l] != s[r]. So, we should start from l+1.

        longest = ""
        for i in range(len(s)):
            # Odd length palindrome
            palindrome1 = expand_around_center(i, i)
            if len(palindrome1) > len(longest):
                longest = palindrome1
            
            # Even length palindrome
            palindrome2 = expand_around_center(i, i + 1)
            if len(palindrome2) > len(longest):
                longest = palindrome2

        return longest
