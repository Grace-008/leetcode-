⭕️暴力解法
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        res=[0]*n
        for i in range(n):
            #求左边的乘积
            leftProd=1
            for j in range(0,i):
                leftProd*=nums[j]
            #求右边的乘积
            rightProd=1
            for j in range(i+1,n):
                rightProd*=nums[j]
            res[i]=leftProd*rightProd
        return res
▶️时间复杂度 O(n^2)     
⭕️优化
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        #求左边的乘积
        leftProduct=[0]*n
        leftProduct[0]=1
        for i in range(1,n):
            leftProduct[i]=leftProduct[i-1]*nums[i-1]
        #求右边的乘积
        rightProduct=[0]*n
        rightProduct[n-1]=1
        for i in range(n-2,-1,-1):
            rightProduct[i]=rightProduct[i+1]*nums[i+1]
        
        res=[0]*n
        for i in range(n):
            res[i]=leftProduct[i]*rightProduct[i]
        return res
 ▶️时间复杂度 O(n) 空间复杂度 O(n)
 ⭕️优化
 
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n=len(nums)
        ans = [1]*len(nums)
        leftProd = 1
        for i in range(n):
            ans[i] *= leftProd
            leftProd *= nums[i]

        rightProd = 1
        for i in range(n-1,-1,-1):          
            ans[i] *= rightProd
            rightProd *= nums[i]

        return ans
