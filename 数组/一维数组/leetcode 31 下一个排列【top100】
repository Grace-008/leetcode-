从数组的右侧开始，找到第一个满足 nums[i] < nums[i + 1] 的索引 i。这样的 i 可以保证 nums[i + 1] 到 nums[nums.length - 1] 是非增序的。

如果找到了这样的 i，我们再从 nums[i + 1] 到 nums[nums.length - 1] 中找到最小的 j，使得 nums[j] > nums[i]。

然后我们交换 nums[i] 和 nums[j]。

最后，我们需要将 nums[i + 1] 到 nums[nums.length - 1] 反转，以使其变为升序。

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # Find the index of the first element from the right that is smaller than its next element
        i = len(nums) - 2
        while i >= 0 and nums[i] >= nums[i+1]:
            i -= 1
        
        if i >= 0:
            # Find the index of the smallest element from the right that is greater than nums[i]
            j = len(nums) - 1
            while j >= 0 and nums[j] <= nums[i]:
                j -= 1
            
            # Swap nums[i] and nums[j]
            nums[i], nums[j] = nums[j], nums[i]
        
        # Reverse the order of the elements after i
        self.reverse(nums, i+1)

    def reverse(self, nums, start):
        end = len(nums) - 1
        while start < end:
            nums[start], nums[end] = nums[end], nums[start]
            start += 1
            end -= 1
