⭕️直接模拟
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        dirs = [[0, 1], [1, 0], [0, -1], [-1, 0]]
        row = 0
        col = 0
        direction = 0
        res = [[0 for _ in range(n)] for _ in range(n)]
        seen = [[False for _ in range(n)] for _ in range(n)]
        
        for i in range(n*n):
            res[row][col] = i+1
            seen[row][col] = True
            nextRow = row + dirs[direction][0]
            nextCol = col + dirs[direction][1]
            
            if nextRow < 0 or nextRow >= n or nextCol < 0 or nextCol >= n or seen[nextRow][nextCol]:
                direction = (direction + 1) % 4
                
            row = row + dirs[direction][0]
            col = col + dirs[direction][1]
            
        return res
⭕️按层模拟
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        res=[[0 for _ in range(n)] for _ in range(n)]
        startRow,endRow,startCol,endCol=0,n-1,0,n-1
        num=1
        while startRow<=endRow and startCol<=endCol:
            for i in range(startCol,endCol+1):
                res[startRow][i]=num
                num+=1

            for i in range(startRow+1,endRow+1):
                res[i][endCol]=num
                num+=1
            for i in range(endCol-1,startCol-1,-1):
                res[endRow][i]=num
                num+=1

            for i in range(endRow-1,startRow,-1):
                res[i][startCol]=num
                num+=1
                
            startRow+=1
            startCol+=1
            endRow-=1
            endCol-=1
        return res
