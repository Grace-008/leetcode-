⭕️两个数组

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        m=len(matrix)
        n=len(matrix[0])

        rows = [False] * m
        cols = [False] * n

        for row in range(m):
            for col in range(n):
                if matrix[row][col]==0:
                    rows[row]=True
                    cols[col]=True

        for row in range(m):
            for col in range(n):
                if rows[row] or cols[col]:
                    matrix[row][col]=0
▶️时间复杂度 O（m*n） 空间复杂度 O（m*n）


⭕️首先，我们需要检查第一行和第一列是否有0，因为后续的算法会改变这两个地方的信息。我们创建两个布尔值，firstRowZero和firstColZero，初始化为False，然后扫描第一行和第一列，如果有0就将相应的布尔值置为True。

然后，我们扫描矩阵的剩余部分（除第一行和第一列以外），如果我们遇到0，我们就把这个0的行和列的第一个元素置为0。

接着，我们再次扫描矩阵的剩余部分，这次如果我们看到行或列的第一个元素是0，我们就把整个行或列置为0。

最后，我们根据firstRowZero和firstColZero的值来决定是否需要将第一行和第一列置为0。

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        m, n = len(matrix), len(matrix[0])
        firstRowZero = False
        firstColZero = False

        for i in range(m):
            if matrix[i][0] == 0:
                firstColZero = True
        for j in range(n):
            if matrix[0][j] == 0:
                firstRowZero = True
                
        for i in range(1, m):
            for j in range(1, n):
                if matrix[i][j] == 0:
                    matrix[i][0] = matrix[0][j] = 0
        
        for i in range(1, m):
            for j in range(1, n):
                if matrix[i][0] == 0 or matrix[0][j] == 0:
                    matrix[i][j] = 0
        
        if firstRowZero:
            for j in range(n):
                matrix[0][j] = 0
                
        if firstColZero:
            for i in range(m):
                matrix[i][0] = 0
