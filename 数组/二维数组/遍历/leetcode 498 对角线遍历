class Solution:
    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        #斜上 row-1 col+1 
        #斜下 row+1 col-1

        #提前执行：col>=n:row+=2,col=n-1,换方向
        #提前执行：row>=m:row=m-1,col+=2,换方向

        #row<0:row=0,col不变，换方向
        #col<0:row不变，col=0，换方向

        
        if len(mat)==0:
            return []
        

        directions = [[-1, 1], [1, -1]]
        dir = 0
        m, n = len(mat), len(mat[0])
        res = []
        row, col = 0, 0
        for i in range(m * n):
            res.append(mat[row][col])
            row_next = row + directions[dir][0]
            col_next = col + directions[dir][1]

            if row_next >= m:  
                col_next = col + 1
                row_next = row
                dir = 1 - dir
            if col_next >= n:  
                row_next = row + 1
                col_next = col
                dir = 1 - dir
            if col_next < 0:
                col_next = 0
                dir = 1 - dir
            if row_next < 0:
                row_next = 0
                dir = 1 - dir

            row, col = row_next, col_next

        return res


