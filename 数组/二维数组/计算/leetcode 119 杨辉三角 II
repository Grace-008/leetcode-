⭕️空间复杂度 O（n^2）
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        rows=[]
        for i in range(rowIndex+1):
            row=[]
            for j in range(i+1):
                if j==0 or j==i:
                    row.append(1)
                else:
                    preRow=rows[i-1]
                    row.append(preRow[j-1]+preRow[j])
            rows.append(row)
        return rows[rowIndex]
        
⭕️空间复杂度 O（n^2）
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        preRow=[]
        for i in range(rowIndex+1):
            row=[]
            for j in range(i+1):
                if j==0 or j==i:
                    row.append(1)
                else:
                    row.append(preRow[j-1]+preRow[j])
            preRow=row
        return preRow

⭕️空间复杂度 O（n）
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1] + [0] * rowIndex
        for i in range(1,rowIndex+1):
            for j in range(i, 0, -1):
                row[j] += row[j-1]
        return row[:rowIndex+1]

