⭕️空间复杂度 O（n^2）
def getRow(rowIndex):
    if rowIndex == 0:
        return [1]  # 第一行只有一个元素1
    elif rowIndex == 1:
        return [1, 1]  # 第二行为[1, 1]
    
    # 初始化当前行为[1]
    current_row = [1]
    
    # 逐行计算直到达到所需的行数
    for i in range(1, rowIndex + 1):
        # 计算当前行的每个元素的值
        for j in range(len(current_row) - 1, 0, -1):
            current_row[j] += current_row[j - 1]
        current_row.append(1)  # 每行末尾添加1
        
    return current_row

        
⭕️空间复杂度 O（n^2）
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        preRow=[]
        for i in range(rowIndex+1):
            row=[]
            for j in range(i+1):
                if j==0 or j==i:
                    row.append(1)
                else:
                    row.append(preRow[j-1]+preRow[j])
            preRow=row
        return preRow

row is initialized as [1, 0, 0, 0].
When i = 1, the inner loop executes once:
j = 1: row[1] += row[0], resulting in row = [1, 1, 0, 0].
When i = 2, the inner loop executes twice:
j = 2: row[2] += row[1], resulting in row = [1, 1, 1, 0].
j = 1: row[1] += row[0], resulting in row = [1, 2, 1, 0].
When i = 3, the inner loop executes three times:
j = 3: row[3] += row[2], resulting in row = [1, 2, 1, 1].
j = 2: row[2] += row[1], resulting in row = [1, 2, 3, 1].
j = 1: row[1] += row[0], resulting in row = [1, 3, 3, 1].
The final row list is [1, 3, 3, 1], which is the expected 3rd row of Pascal's Triangle (zero-indexed).

⭕️空间复杂度 O（n）
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        row = [1] + [0] * rowIndex
        for i in range(1,rowIndex+1):
            for j in range(i, 0, -1):
                row[j] += row[j-1]
        return row[:rowIndex+1]

