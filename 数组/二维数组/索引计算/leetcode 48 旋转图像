⭕️直接模拟，使用额外数组
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """

        #矩阵中第row行的第col列=旋转后倒数第row列的第col行位置
        #matrix[row][col]=matrix[col][n-row-1]
        n=len(matrix)
        t=[[0]*n for _ in range(n)]
        for i in range(n):
            for j in range(n):
                t[j][n-i-1]=matrix[i][j]
        
        for i in range(n):
            for j in range(n):
                matrix[i][j]=t[i][j]
    
        
⭕️原地旋转
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n=len(matrix)
        for row in range(n//2):
            for col in range((n+1)//2):
                temp = matrix[row][col]
                matrix[row][col]=matrix[n-col-1][row]
                matrix[n-col-1][row]=matrix[n-row-1][n-col-1]
                matrix[n-row-1][n-col-1]=matrix[col][n-row-1]
                matrix[col][n-row-1]=temp
        
⭕️原地翻转









