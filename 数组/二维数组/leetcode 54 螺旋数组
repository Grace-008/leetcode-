class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m = len(matrix)    # Get the number of rows of the matrix
        n = len(matrix[0]) # Get the number of columns of the matrix
        upper_bound = 0    # Initialize the index of the upper bound of the matrix
        lower_bound = m - 1 # Initialize the index of the lower bound of the matrix
        left_bound = 0    # Initialize the index of the left bound of the matrix
        right_bound = n - 1 # Initialize the index of the right bound of the matrix
        res = []          # Initialize the result list
        while len(res) < m * n: # Iterate until all elements of the matrix are processed
            if upper_bound <= lower_bound:
                # Traverse the top row from left to right
                for j in range(left_bound, right_bound+1):
                    res.append(matrix[upper_bound][j])
                upper_bound += 1 # Update the index of the upper bound to exclude the top row
            if left_bound <= right_bound:
                # Traverse the right column from top to bottom
                for i in range(upper_bound, lower_bound+1):
                    res.append(matrix[i][right_bound])
                right_bound -= 1 # Update the index of the right bound to exclude the right column
            if upper_bound <= lower_bound:
                # Traverse the bottom row from right to left
                for j in range(right_bound, left_bound-1, -1):
                    res.append(matrix[lower_bound][j])
                lower_bound -= 1 # Update the index of the lower bound to exclude the bottom row
            if left_bound <= right_bound:
                # Traverse the left column from bottom to top
                for i in range(lower_bound, upper_bound-1, -1):
                    res.append(matrix[i][left_bound])
                left_bound += 1 # Update the index of the left bound to exclude the left column
        return res # Return the result list
